# docker-compose.simple.yml
# Configuración simplificada para integración con frontend actual
version: '3.8'

services:
  # ==========================================
  # DATABASES
  # ==========================================
  
  # Base de datos principal (compatibilidad)
  postgres:
    image: postgres:15-alpine
    container_name: mtn-postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-Admisión_MTN_DB}
      POSTGRES_USER: ${DB_USERNAME:-admin}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-admin123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-admin} -d ${DB_NAME:-Admisión_MTN_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mtn-network
    restart: unless-stopped

  # User Service Database (microservicio)
  users-db:
    image: postgres:15-alpine
    container_name: mtn-users-db
    environment:
      POSTGRES_DB: users_db
      POSTGRES_USER: users_admin
      POSTGRES_PASSWORD: users123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5433:5432"
    volumes:
      - users_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U users_admin -d users_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mtn-network
    restart: unless-stopped

  # ==========================================
  # BACKEND SERVICES
  # ==========================================
  
  # Monolito (modo compatibilidad)
  backend-monolith:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mtn-backend-monolith
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${DB_NAME:-Admisión_MTN_DB}
      SPRING_DATASOURCE_USERNAME: ${DB_USERNAME:-admin}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD:-admin123}
      
      # Configuración para microservicios
      USER_SERVICE_ENABLED: false
      APPLICATION_SERVICE_ENABLED: false
      
      # CORS para frontend
      CORS_ALLOWED_ORIGINS: http://localhost:5173,http://localhost:5174,http://localhost:5175,http://localhost:5176,http://localhost:5177
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s
    networks:
      - mtn-network
    restart: unless-stopped

  # User Service (microservicio)
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: mtn-user-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DB_URL: jdbc:postgresql://users-db:5432/users_db
      DB_USERNAME: users_admin
      DB_PASSWORD: users123
      
      # Configuración de servidor
      SERVER_PORT: 8082
      
      # CORS para frontend
      CORS_ALLOWED_ORIGINS: http://localhost:5173,http://localhost:5174,http://localhost:5175,http://localhost:5176,http://localhost:5177
    ports:
      - "8082:8082"
    depends_on:
      users-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s
    networks:
      - mtn-network
    restart: unless-stopped

  # ==========================================
  # API GATEWAY (Opcional)
  # ==========================================
  
  api-gateway:
    image: nginx:alpine
    container_name: mtn-api-gateway
    ports:
      - "8081:80"
    volumes:
      - ./gateway-nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - backend-monolith
      - user-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - mtn-network
    restart: unless-stopped

# ==========================================
# NETWORKS
# ==========================================

networks:
  mtn-network:
    driver: bridge
    name: mtn-network

# ==========================================
# VOLUMES
# ==========================================

volumes:
  postgres_data:
    name: mtn_postgres_data
  users_db_data:
    name: mtn_users_db_data