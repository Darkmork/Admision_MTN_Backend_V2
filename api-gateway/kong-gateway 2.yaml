# Kong Gateway Configuration for MTN Admission System
# Feature Flags and Traffic Routing between Monolith and Microservices

apiVersion: configuration.konghq.com/v1
kind: KongIngress
metadata:
  name: mtn-api-gateway
  namespace: mtn-gateway
  labels:
    app: mtn-api-gateway
    environment: production
spec:
  upstream:
    healthchecks:
      active:
        type: http
        http_path: "/actuator/health"
        healthy:
          interval: 30
          successes: 1
        unhealthy:
          interval: 15
          http_failures: 3
          timeouts: 3
      passive:
        healthy:
          successes: 3
        unhealthy:
          http_failures: 5
          timeouts: 5
  proxy:
    connect_timeout: 10000
    read_timeout: 60000
    write_timeout: 60000

---
# Feature Flags Plugin Configuration
apiVersion: configuration.konghq.com/v1
kind: KongPlugin
metadata:
  name: feature-flags
  namespace: mtn-gateway
plugin: request-transformer
config:
  add:
    headers:
      - "X-Feature-Flags: enabled"
      - "X-Gateway-Version: v2.0"
    querystring:
      - "gateway_version:v2"
  replace:
    headers:
      - "X-Original-URI:$(headers['x-forwarded-uri'] or uri)"

---
# Rate Limiting Plugin
apiVersion: configuration.konghq.com/v1
kind: KongPlugin
metadata:
  name: rate-limiting
  namespace: mtn-gateway
plugin: rate-limiting-advanced
config:
  limit:
    - 1000  # requests per minute for regular users
    - 5000  # requests per minute for admin users
  window_size:
    - 60
  identifier: consumer
  sync_rate: 5
  strategy: cluster
  hide_client_headers: false
  redis:
    host: "redis.mtn-gateway.svc.cluster.local"
    port: 6379
    timeout: 2000

---
# CORS Plugin
apiVersion: configuration.konghq.com/v1
kind: KongPlugin
metadata:
  name: cors-policy
  namespace: mtn-gateway
plugin: cors
config:
  origins:
    - "https://*.mtn.cl"
    - "https://mtn.cl"
    - "http://localhost:3000"
    - "http://localhost:5173"
  methods:
    - GET
    - POST
    - PUT
    - DELETE
    - OPTIONS
    - PATCH
  headers:
    - Accept
    - Accept-Version
    - Content-Length
    - Content-MD5
    - Content-Type
    - Date
    - Authorization
    - X-Auth-Token
    - X-Feature-Flag
    - X-Canary
    - X-User-Role
  exposed_headers:
    - X-Auth-Token
    - X-RateLimit-Limit
    - X-RateLimit-Remaining
  credentials: true
  max_age: 3600

---
# JWT Authentication Plugin
apiVersion: configuration.konghq.com/v1
kind: KongPlugin
metadata:
  name: jwt-auth
  namespace: mtn-gateway
plugin: jwt
config:
  uri_param_names:
    - jwt
  header_names:
    - authorization
  claims_to_verify:
    - exp
    - iat
  key_claim_name: iss
  anonymous: false
  run_on_preflight: false

---
# Request Size Limiting Plugin
apiVersion: configuration.konghq.com/v1
kind: KongPlugin
metadata:
  name: request-size-limiting
  namespace: mtn-gateway
plugin: request-size-limiting
config:
  allowed_payload_size: 10  # 10MB for file uploads

---
# Response Transformer Plugin for Feature Flags
apiVersion: configuration.konghq.com/v1
kind: KongPlugin
metadata:
  name: response-transformer
  namespace: mtn-gateway
plugin: response-transformer
config:
  add:
    headers:
      - "X-Powered-By:MTN-Gateway-v2.0"
      - "X-Service-Architecture:microservices"
    json:
      - "gateway_metadata.version:v2.0"
      - "gateway_metadata.features:enabled"

---
# Main Service Configuration - Monolith (Legacy)
apiVersion: v1
kind: Service
metadata:
  name: admision-monolith
  namespace: mtn-gateway
  annotations:
    konghq.com/plugins: feature-flags,rate-limiting,cors-policy,jwt-auth,request-size-limiting
    feature-flag.mtn.cl/legacy: "true"
    feature-flag.mtn.cl/weight: "0"  # Start with 0% traffic
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8080
    targetPort: 8080
    protocol: TCP
  selector:
    app: admision-monolith

---
# User Service (Microservice)
apiVersion: v1
kind: Service  
metadata:
  name: user-service
  namespace: mtn-gateway
  annotations:
    konghq.com/plugins: feature-flags,rate-limiting,cors-policy,jwt-auth
    feature-flag.mtn.cl/microservice: "true"
    feature-flag.mtn.cl/weight: "100"  # Start with 100% traffic
    feature-flag.mtn.cl/canary-weight: "0"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8080
    targetPort: 8080
    protocol: TCP
  selector:
    app: user-service

---
# Application Service (Microservice)
apiVersion: v1
kind: Service
metadata:
  name: application-service
  namespace: mtn-gateway
  annotations:
    konghq.com/plugins: feature-flags,rate-limiting,cors-policy,jwt-auth,request-size-limiting
    feature-flag.mtn.cl/microservice: "true" 
    feature-flag.mtn.cl/weight: "100"
    feature-flag.mtn.cl/canary-weight: "0"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8080
    targetPort: 8080
    protocol: TCP
  selector:
    app: application-service

---
# Evaluation Service (Microservice)
apiVersion: v1
kind: Service
metadata:
  name: evaluation-service
  namespace: mtn-gateway
  annotations:
    konghq.com/plugins: feature-flags,rate-limiting,cors-policy,jwt-auth
    feature-flag.mtn.cl/microservice: "true"
    feature-flag.mtn.cl/weight: "100"
    feature-flag.mtn.cl/canary-weight: "0"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8080
    targetPort: 8080
    protocol: TCP
  selector:
    app: evaluation-service

---
# Notification Service (Microservice)
apiVersion: v1
kind: Service
metadata:
  name: notification-service
  namespace: mtn-gateway
  annotations:
    konghq.com/plugins: feature-flags,rate-limiting,cors-policy
    feature-flag.mtn.cl/microservice: "true"
    feature-flag.mtn.cl/weight: "100"
    feature-flag.mtn.cl/canary-weight: "0"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8080
    targetPort: 8080
    protocol: TCP
  selector:
    app: notification-service

---
# Kong Ingress Routes Configuration
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: mtn-api-gateway
  namespace: mtn-gateway
  annotations:
    kubernetes.io/ingress.class: kong
    konghq.com/plugins: feature-flags,rate-limiting,cors-policy,response-transformer
    # Feature Flag Routing Configuration
    konghq.com/override: |
      upstream_url: http://kong-proxy.kong-system.svc.cluster.local
    # Traffic Splitting Configuration
    nginx.ingress.kubernetes.io/service-upstream: "true"
    nginx.ingress.kubernetes.io/canary-weight: "0"
    # Security Headers
    nginx.ingress.kubernetes.io/server-snippet: |
      add_header X-Frame-Options "SAMEORIGIN" always;
      add_header X-Content-Type-Options "nosniff" always;
      add_header X-XSS-Protection "1; mode=block" always;
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
spec:
  tls:
  - hosts:
    - api.mtn.cl
    - gateway.mtn.cl
    secretName: mtn-api-tls
  rules:
  # Main API Routes
  - host: api.mtn.cl
    http:
      paths:
      # User Management Routes - Route to User Service
      - path: /api/users
        pathType: Prefix
        backend:
          service:
            name: user-service
            port:
              number: 8080
      - path: /api/auth
        pathType: Prefix
        backend:
          service:
            name: user-service
            port:
              number: 8080
      
      # Application Management Routes - Route to Application Service  
      - path: /api/applications
        pathType: Prefix
        backend:
          service:
            name: application-service
            port:
              number: 8080
      - path: /api/documents
        pathType: Prefix
        backend:
          service:
            name: application-service
            port:
              number: 8080
      
      # Evaluation Routes - Route to Evaluation Service
      - path: /api/evaluations
        pathType: Prefix
        backend:
          service:
            name: evaluation-service
            port:
              number: 8080
      - path: /api/interviews
        pathType: Prefix
        backend:
          service:
            name: evaluation-service
            port:
              number: 8080
      
      # Notification Routes - Route to Notification Service
      - path: /api/notifications
        pathType: Prefix
        backend:
          service:
            name: notification-service
            port:
              number: 8080
      - path: /api/email
        pathType: Prefix
        backend:
          service:
            name: notification-service
            port:
              number: 8080
            
      # Legacy Routes - Route to Monolith (for gradual migration)
      - path: /api/legacy
        pathType: Prefix
        backend:
          service:
            name: admision-monolith
            port:
              number: 8080

  # Gateway Management Interface
  - host: gateway.mtn.cl
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: kong-admin
            port:
              number: 8001

---
# Feature Flag ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: feature-flags-config
  namespace: mtn-gateway
  labels:
    app: mtn-feature-flags
data:
  features.json: |
    {
      "microservices_migration": {
        "enabled": true,
        "description": "Enable microservices architecture migration",
        "rollout_percentage": 100,
        "targeting": {
          "user_roles": ["ADMIN", "TEACHER", "COORDINATOR"],
          "beta_users": true
        }
      },
      "user_service_routing": {
        "enabled": true,
        "description": "Route user management to user-service",
        "rollout_percentage": 100,
        "canary_percentage": 0,
        "sticky_sessions": true
      },
      "application_service_routing": {
        "enabled": true,
        "description": "Route application management to application-service",
        "rollout_percentage": 100,
        "canary_percentage": 0,
        "file_upload_enhanced": true
      },
      "evaluation_service_routing": {
        "enabled": true,
        "description": "Route evaluations to evaluation-service",
        "rollout_percentage": 100,
        "canary_percentage": 0,
        "real_time_updates": true
      },
      "notification_service_routing": {
        "enabled": true,
        "description": "Route notifications to notification-service", 
        "rollout_percentage": 100,
        "canary_percentage": 0,
        "email_templates_v2": true
      },
      "enhanced_security": {
        "enabled": true,
        "description": "Enhanced security features",
        "rate_limiting": {
          "enabled": true,
          "requests_per_minute": 1000,
          "burst_limit": 100
        },
        "jwt_validation": {
          "enabled": true,
          "strict_mode": true
        }
      },
      "observability": {
        "enabled": true,
        "description": "Enhanced observability and monitoring",
        "distributed_tracing": true,
        "metrics_collection": true,
        "log_correlation": true
      },
      "canary_deployments": {
        "enabled": true,
        "description": "Canary deployment capabilities",
        "automatic_promotion": true,
        "rollback_on_error": true,
        "success_rate_threshold": 0.99,
        "latency_threshold_ms": 500
      }
    }
    
  routing_rules.yaml: |
    rules:
      # User Service Routing Rules
      - service: user-service
        paths:
          - /api/users/**
          - /api/auth/**
        methods: [GET, POST, PUT, DELETE]
        feature_flags:
          - user_service_routing
        weight: 100
        canary_weight: 0
        
      # Application Service Routing Rules  
      - service: application-service
        paths:
          - /api/applications/**
          - /api/documents/**
        methods: [GET, POST, PUT, DELETE]
        feature_flags:
          - application_service_routing
        weight: 100
        canary_weight: 0
        
      # Evaluation Service Routing Rules
      - service: evaluation-service
        paths:
          - /api/evaluations/**
          - /api/interviews/**
        methods: [GET, POST, PUT, DELETE]
        feature_flags:
          - evaluation_service_routing  
        weight: 100
        canary_weight: 0
        
      # Notification Service Routing Rules
      - service: notification-service
        paths:
          - /api/notifications/**
          - /api/email/**
        methods: [GET, POST]
        feature_flags:
          - notification_service_routing
        weight: 100
        canary_weight: 0
        
      # Legacy Monolith Fallback
      - service: admision-monolith
        paths:
          - /api/legacy/**
        methods: [GET, POST, PUT, DELETE]
        feature_flags: []
        weight: 0  # Disabled by default
        canary_weight: 0