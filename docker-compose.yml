# docker-compose.yml (actualizado con user-service)

version: '3.8'

services:
  # ==========================================
  # DATABASES
  # ==========================================
  
  # Main PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: mtn-postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-Admisi贸n_MTN_DB}
      POSTGRES_USER: ${DB_USERNAME:-admin}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-admin123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-admin} -d ${DB_NAME:-Admisi贸n_MTN_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mtn-network
    restart: unless-stopped

  # User Service Database
  users-db:
    image: postgres:15-alpine
    container_name: mtn-users-db
    environment:
      POSTGRES_DB: users_db
      POSTGRES_USER: users_admin
      POSTGRES_PASSWORD: users123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5433:5432"
    volumes:
      - users_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U users_admin -d users_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mtn-network
    restart: unless-stopped

  # ==========================================
  # MESSAGE BROKER
  # ==========================================
  
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: mtn-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USERNAME:-admin}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-admin123}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_VHOST:-/}
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./platform/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
      - ./platform/rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - mtn-network
    restart: unless-stopped

  # ==========================================
  # AUTHENTICATION
  # ==========================================
  
  keycloak:
    image: quay.io/keycloak/keycloak:23.0.1
    container_name: mtn-keycloak
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN:-admin}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-admin123}
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/${DB_NAME:-Admisi贸n_MTN_DB}
      KC_DB_USERNAME: ${DB_USERNAME:-admin}
      KC_DB_PASSWORD: ${DB_PASSWORD:-admin123}
      KC_HOSTNAME: ${KEYCLOAK_HOSTNAME:-localhost}
      KC_HOSTNAME_PORT: ${KEYCLOAK_PORT:-8090}
      KC_HTTP_ENABLED: true
      KC_HEALTH_ENABLED: true
      KC_METRICS_ENABLED: true
    command: start-dev --import-realm
    ports:
      - "8090:8080"
    volumes:
      - ./platform/keycloak/realm-mtn-admision.json:/opt/keycloak/data/import/realm-mtn-admision.json:ro
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - mtn-network
    restart: unless-stopped

  # ==========================================
  # SERVICE DISCOVERY
  # ==========================================
  
  eureka-server:
    build:
      context: ./platform/eureka-server
      dockerfile: Dockerfile
    container_name: mtn-eureka-server
    environment:
      SPRING_PROFILES_ACTIVE: docker
      EUREKA_INSTANCE_HOSTNAME: eureka-server
    ports:
      - "8761:8761"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - mtn-network
    restart: unless-stopped

  # ==========================================
  # API GATEWAY
  # ==========================================
  
  api-gateway:
    build:
      context: ./platform/api-gateway
      dockerfile: Dockerfile
    container_name: mtn-api-gateway
    environment:
      SPRING_PROFILES_ACTIVE: docker
      EUREKA_SERVER_URL: http://eureka-server:8761/eureka/
      KEYCLOAK_ISSUER_URI: http://keycloak:8080/realms/mtn-admision
      KEYCLOAK_JWK_SET_URI: http://keycloak:8080/realms/mtn-admision/protocol/openid-connect/certs
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
      OTEL_SERVICE_NAME: api-gateway
    ports:
      - "8080:8080"
    depends_on:
      eureka-server:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - mtn-network
    restart: unless-stopped

  # ==========================================
  # CORE SERVICES
  # ==========================================
  
  # User Service (NEW)
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: mtn-user-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DB_URL: jdbc:postgresql://users-db:5432/users_db
      DB_USERNAME: users_admin
      DB_PASSWORD: users123
      EUREKA_SERVER_URL: http://eureka-server:8761/eureka/
      KEYCLOAK_ISSUER_URI: http://keycloak:8080/realms/mtn-admision
      KEYCLOAK_JWK_SET_URI: http://keycloak:8080/realms/mtn-admision/protocol/openid-connect/certs
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USERNAME: ${RABBITMQ_USERNAME:-admin}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD:-admin123}
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
      OTEL_SERVICE_NAME: user-service
    ports:
      - "8082:8082"
    depends_on:
      users-db:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      keycloak:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s
    networks:
      - mtn-network
    restart: unless-stopped

  # Monolith Application
  admision-monolith:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mtn-admision-monolith
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${DB_NAME:-Admisi贸n_MTN_DB}
      SPRING_DATASOURCE_USERNAME: ${DB_USERNAME:-admin}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD:-admin123}
      EUREKA_SERVER_URL: http://eureka-server:8761/eureka/
      KEYCLOAK_ISSUER_URI: http://keycloak:8080/realms/mtn-admision
      USER_SERVICE_BASE_URL: http://user-service:8082
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USERNAME: ${RABBITMQ_USERNAME:-admin}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD:-admin123}
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
      OTEL_SERVICE_NAME: admision-monolith
    ports:
      - "8081:8081"
    depends_on:
      postgres:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      user-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s
    networks:
      - mtn-network
    restart: unless-stopped

  # Frontend Application
  frontend:
    build:
      context: ../Admision_MTN_front
      dockerfile: Dockerfile
    container_name: mtn-frontend
    environment:
      REACT_APP_API_BASE_URL: http://localhost:8080
      REACT_APP_KEYCLOAK_URL: http://localhost:8090
      REACT_APP_KEYCLOAK_REALM: mtn-admision
      REACT_APP_KEYCLOAK_CLIENT_ID: admision-frontend
    ports:
      - "3000:80"
    depends_on:
      api-gateway:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - mtn-network
    restart: unless-stopped

  # ==========================================
  # OBSERVABILITY STACK
  # ==========================================
  
  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.85.0
    container_name: mtn-otel-collector
    command: ["--config=/etc/otel-collector-config.yml"]
    volumes:
      - ./platform/otel/otel-collector.yaml:/etc/otel-collector-config.yml:ro
    ports:
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP HTTP
      - "8888:8888"   # Metrics
    depends_on:
      - jaeger
      - prometheus
      - loki
    networks:
      - mtn-network
    restart: unless-stopped

  # Jaeger Tracing
  jaeger:
    image: jaegertracing/all-in-one:1.49
    container_name: mtn-jaeger
    environment:
      COLLECTOR_OTLP_ENABLED: true
      COLLECTOR_ZIPKIN_HOST_PORT: :9411
    ports:
      - "16686:16686"  # Web UI
      - "14268:14268"  # Jaeger collector
      - "9411:9411"    # Zipkin collector
    networks:
      - mtn-network
    restart: unless-stopped

  # Prometheus Metrics
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: mtn-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./platform/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - mtn-network
    restart: unless-stopped

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:10.0.3
    container_name: mtn-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin123}
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./platform/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./platform/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
      - loki
      - jaeger
    networks:
      - mtn-network
    restart: unless-stopped

  # Loki Log Aggregation
  loki:
    image: grafana/loki:2.8.0
    container_name: mtn-loki
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"
    volumes:
      - ./platform/loki/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    networks:
      - mtn-network
    restart: unless-stopped

  # Promtail Log Shipper
  promtail:
    image: grafana/promtail:2.8.0
    container_name: mtn-promtail
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - ./platform/promtail/promtail-config.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - loki
    networks:
      - mtn-network
    restart: unless-stopped

# ==========================================
# NETWORKS
# ==========================================

networks:
  mtn-network:
    driver: bridge
    name: mtn-network

# ==========================================
# VOLUMES
# ==========================================

volumes:
  postgres_data:
    name: mtn_postgres_data
  users_db_data:
    name: mtn_users_db_data
  rabbitmq_data:
    name: mtn_rabbitmq_data
  prometheus_data:
    name: mtn_prometheus_data
  grafana_data:
    name: mtn_grafana_data
  loki_data:
    name: mtn_loki_data