# platform/api-gateway/src/main/resources/application.yml (actualizado con user-service)

server:
  port: 8080

spring:
  application:
    name: api-gateway
    
  # Service Discovery
  cloud:
    gateway:
      discovery:
        locator:
          enabled: true
          lower-case-service-id: true
          
      # Route Configuration
      routes:
        # ==========================================
        # USER SERVICE ROUTES (PHASE 2 - NEW)
        # ==========================================
        
        # User Management Routes
        - id: user-service-users
          uri: lb://user-service
          predicates:
            - Path=/api/users/**
          filters:
            - name: JwtAuthentication
            - name: HeaderPropagation
            - name: CircuitBreaker
              args:
                name: user-service-breaker
                fallbackUri: forward:/fallback/users
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 50
                redis-rate-limiter.burstCapacity: 100
                key-resolver: "#{@userKeyResolver}"
                
        # User Profile Route
        - id: user-service-me
          uri: lb://user-service
          predicates:
            - Path=/api/me/**
          filters:
            - name: JwtAuthentication
            - name: HeaderPropagation
            - name: CircuitBreaker
              args:
                name: user-service-breaker
                fallbackUri: forward:/fallback/me
                
        # Roles Management Routes
        - id: user-service-roles
          uri: lb://user-service
          predicates:
            - Path=/api/roles/**
          filters:
            - name: JwtAuthentication
            - name: HeaderPropagation
            - name: CircuitBreaker
              args:
                name: user-service-breaker
                fallbackUri: forward:/fallback/roles
        
        # ==========================================
        # MONOLITH ROUTES (PHASE 1 - EXISTING)
        # ==========================================
        
        # Application Management (Monolith)
        - id: monolith-applications
          uri: lb://admision-monolith
          predicates:
            - Path=/api/applications/**
          filters:
            - name: JwtAuthentication
            - name: HeaderPropagation
            - name: CircuitBreaker
              args:
                name: monolith-breaker
                fallbackUri: forward:/fallback/applications
                
        # Document Management (Monolith)
        - id: monolith-documents
          uri: lb://admision-monolith
          predicates:
            - Path=/api/documents/**
          filters:
            - name: JwtAuthentication
            - name: HeaderPropagation
            - name: CircuitBreaker
              args:
                name: monolith-breaker
                
        # Evaluation Management (Monolith)
        - id: monolith-evaluations
          uri: lb://admision-monolith
          predicates:
            - Path=/api/evaluations/**
          filters:
            - name: JwtAuthentication
            - name: HeaderPropagation
            - name: CircuitBreaker
              args:
                name: monolith-breaker
                
        # Interview Management (Monolith)
        - id: monolith-interviews
          uri: lb://admision-monolith
          predicates:
            - Path=/api/interviews/**
          filters:
            - name: JwtAuthentication
            - name: HeaderPropagation
            - name: CircuitBreaker
              args:
                name: monolith-breaker
                
        # Email/Notification Management (Monolith)
        - id: monolith-emails
          uri: lb://admision-monolith
          predicates:
            - Path=/api/emails/**
          filters:
            - name: JwtAuthentication
            - name: HeaderPropagation
            - name: CircuitBreaker
              args:
                name: monolith-breaker
                
        # Admin Routes (Monolith)
        - id: monolith-admin
          uri: lb://admision-monolith
          predicates:
            - Path=/api/admin/**
          filters:
            - name: JwtAuthentication
            - name: HeaderPropagation
            - name: CircuitBreaker
              args:
                name: monolith-breaker
                
        # Authentication Routes (Monolith - Legacy)
        - id: monolith-auth
          uri: lb://admision-monolith
          predicates:
            - Path=/api/auth/**
          filters:
            - name: CircuitBreaker
              args:
                name: monolith-breaker
                
        # Catch-all for remaining API routes (Monolith)
        - id: monolith-api-fallback
          uri: lb://admision-monolith
          predicates:
            - Path=/api/**
          filters:
            - name: JwtAuthentication
            - name: HeaderPropagation
            - name: CircuitBreaker
              args:
                name: monolith-breaker
                fallbackUri: forward:/fallback/api
                
        # ==========================================
        # FRONTEND ROUTES
        # ==========================================
        
        # Frontend Routes
        - id: frontend
          uri: lb://frontend
          predicates:
            - Path=/**
          filters:
            - name: CircuitBreaker
              args:
                name: frontend-breaker
                fallbackUri: forward:/fallback/frontend

  # JWT Configuration
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${KEYCLOAK_ISSUER_URI:http://keycloak:8080/realms/mtn-admision}
          jwk-set-uri: ${KEYCLOAK_JWK_SET_URI:http://keycloak:8080/realms/mtn-admision/protocol/openid-connect/certs}

# Eureka Client Configuration          
eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_SERVER_URL:http://eureka-server:8761/eureka/}
    register-with-eureka: true
    fetch-registry: true
    registry-fetch-interval-seconds: 30
    
  instance:
    prefer-ip-address: true
    hostname: ${HOSTNAME:api-gateway}
    instance-id: ${spring.application.name}:${spring.application.instance-id:${random.value}}
    lease-renewal-interval-in-seconds: 30
    lease-expiration-duration-in-seconds: 90
    
# Circuit Breaker Configuration
resilience4j:
  circuitbreaker:
    instances:
      user-service-breaker:
        sliding-window-size: 10
        minimum-number-of-calls: 5
        failure-rate-threshold: 50
        wait-duration-in-open-state: 30s
        permitted-number-of-calls-in-half-open-state: 3
        automatic-transition-from-open-to-half-open-enabled: true
        
      monolith-breaker:
        sliding-window-size: 20
        minimum-number-of-calls: 10
        failure-rate-threshold: 60
        wait-duration-in-open-state: 60s
        permitted-number-of-calls-in-half-open-state: 5
        automatic-transition-from-open-to-half-open-enabled: true
        
      frontend-breaker:
        sliding-window-size: 10
        minimum-number-of-calls: 3
        failure-rate-threshold: 70
        wait-duration-in-open-state: 20s
        
  timelimiter:
    instances:
      user-service-breaker:
        timeout-duration: 10s
      monolith-breaker:
        timeout-duration: 30s
      frontend-breaker:
        timeout-duration: 5s

# Rate Limiting Configuration        
spring:
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      timeout: 2000ms
      
# Management and Observability
management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always
      show-components: always
    gateway:
      enabled: true
  health:
    circuitbreakers:
      enabled: true
  tracing:
    sampling:
      probability: 1.0
  otlp:
    tracing:
      endpoint: ${OTEL_EXPORTER_OTLP_ENDPOINT:http://otel-collector:4317}

# Logging Configuration
logging:
  level:
    org.springframework.cloud.gateway: DEBUG
    com.desafios.mtn.gateway: INFO
    org.springframework.security: DEBUG
    resilience4j: DEBUG
  pattern:
    console: "%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr([%t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n"

---
# Docker Profile
spring:
  config:
    activate:
      on-profile: docker

eureka:
  client:
    service-url:
      defaultZone: http://eureka-server:8761/eureka/
      
logging:
  level:
    org.springframework.cloud.gateway: INFO
    com.desafios.mtn.gateway: INFO
    org.springframework.security: INFO

---
# Local Development Profile  
spring:
  config:
    activate:
      on-profile: local

eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/
      
spring:
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:8090/realms/mtn-admision
          jwk-set-uri: http://localhost:8090/realms/mtn-admision/protocol/openid-connect/certs

management:
  otlp:
    tracing:
      endpoint: http://localhost:4317

---
# Production Profile
spring:
  config:
    activate:
      on-profile: prod

management:
  tracing:
    sampling:
      probability: 0.1
  endpoint:
    health:
      show-details: when-authorized
      
logging:
  level:
    org.springframework.cloud.gateway: WARN
    com.desafios.mtn.gateway: INFO
    org.springframework.security: WARN
    root: WARN