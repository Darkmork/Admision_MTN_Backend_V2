groups:
# Golden Signals Recording Rules - Latency
- name: latency_recording_rules
  interval: 30s
  rules:
  # HTTP Request Latency p99 per service
  - record: service:http:p99_latency_seconds
    expr: |
      histogram_quantile(0.99,
        sum by (le, app) (
          rate(http_server_requests_seconds_bucket{status!~"5.."}[5m])
        )
      )
    labels:
      signal: latency
      percentile: p99

  # HTTP Request Latency p95 per service
  - record: service:http:p95_latency_seconds
    expr: |
      histogram_quantile(0.95,
        sum by (le, app) (
          rate(http_server_requests_seconds_bucket{status!~"5.."}[5m])
        )
      )
    labels:
      signal: latency
      percentile: p95

  # HTTP Request Latency p50 per service
  - record: service:http:p50_latency_seconds
    expr: |
      histogram_quantile(0.50,
        sum by (le, app) (
          rate(http_server_requests_seconds_bucket{status!~"5.."}[5m])
        )
      )
    labels:
      signal: latency
      percentile: p50

# Golden Signals Recording Rules - Error Rate
- name: error_rate_recording_rules
  interval: 30s
  rules:
  # HTTP Error Rate per service (5xx/total)
  - record: service:http:error_rate
    expr: |
      (
        sum by (app) (rate(http_server_requests_total{status=~"5.."}[5m]))
        /
        sum by (app) (rate(http_server_requests_total[5m]))
      ) * 100
    labels:
      signal: errors

  # HTTP Error Rate 5-minute window
  - record: service:http:error_rate_5m
    expr: |
      sum by (app) (rate(http_server_requests_total{status=~"5.."}[5m]))
      /
      sum by (app) (rate(http_server_requests_total[5m]))
    labels:
      signal: errors
      window: 5m

  # HTTP Error Rate 1-hour window  
  - record: service:http:error_rate_1h
    expr: |
      sum by (app) (rate(http_server_requests_total{status=~"5.."}[1h]))
      /
      sum by (app) (rate(http_server_requests_total[1h]))
    labels:
      signal: errors
      window: 1h

# Golden Signals Recording Rules - Throughput
- name: throughput_recording_rules
  interval: 30s
  rules:
  # HTTP Requests per second per service
  - record: service:http:rps
    expr: |
      sum by (app) (
        rate(http_server_requests_total[5m])
      )
    labels:
      signal: throughput

  # HTTP Requests per second by status code
  - record: service:http:rps_by_status
    expr: |
      sum by (app, status) (
        rate(http_server_requests_total[5m])
      )
    labels:
      signal: throughput

# Event Processing Recording Rules - Outbox Pattern
- name: outbox_recording_rules
  interval: 30s
  rules:
  # Outbox unprocessed events backlog
  - record: service:outbox:backlog
    expr: |
      sum by (app) (
        outbox_unprocessed_total or vector(0)
      )
    labels:
      signal: backlog
      component: outbox

  # Outbox processing rate
  - record: service:outbox:processing_rate
    expr: |
      sum by (app) (
        rate(outbox_processed_total[5m])
      )
    labels:
      signal: throughput
      component: outbox

  # Outbox processing errors
  - record: service:outbox:error_rate
    expr: |
      (
        sum by (app) (rate(outbox_processing_errors_total[5m]))
        /
        sum by (app) (rate(outbox_processed_total[5m]))
      ) * 100
    labels:
      signal: errors
      component: outbox

# Message Queue Recording Rules - RabbitMQ
- name: rabbitmq_recording_rules
  interval: 30s
  rules:
  # Queue depth (messages ready)
  - record: queue:messages:ready
    expr: |
      sum by (queue, vhost) (
        rabbitmq_queue_messages_ready
      )
    labels:
      signal: backlog
      component: queue

  # Queue depth (unacknowledged messages)  
  - record: queue:messages:unacknowledged
    expr: |
      sum by (queue, vhost) (
        rabbitmq_queue_messages_unacknowledged
      )
    labels:
      signal: backlog
      component: queue

  # Message publishing rate
  - record: queue:messages:publish_rate
    expr: |
      sum by (queue, vhost) (
        rate(rabbitmq_queue_messages_published_total[5m])
      )
    labels:
      signal: throughput
      component: queue

  # Message consumption rate
  - record: queue:messages:consume_rate
    expr: |
      sum by (queue, vhost) (
        rate(rabbitmq_queue_messages_delivered_total[5m])
      )
    labels:
      signal: throughput
      component: queue

  # DLQ messages (Dead Letter Queue)
  - record: queue:dlq:messages
    expr: |
      sum by (queue, vhost) (
        rabbitmq_queue_messages_ready{queue=~".*dlq.*|.*dead.*"}
      )
    labels:
      signal: errors
      component: dlq

# Database Recording Rules - PostgreSQL
- name: database_recording_rules
  interval: 30s
  rules:
  # Database connection pool utilization
  - record: service:db:connection_pool_utilization
    expr: |
      (
        hikaricp_connections_active
        /
        hikaricp_connections_max
      ) * 100
    labels:
      signal: utilization
      component: database

  # Database query execution time p99
  - record: service:db:query_time_p99
    expr: |
      histogram_quantile(0.99,
        sum by (le, app) (
          rate(hikaricp_connections_usage_seconds_bucket[5m])
        )
      )
    labels:
      signal: latency
      component: database
      percentile: p99

  # Database connection acquisition time
  - record: service:db:connection_acquire_time_p99
    expr: |
      histogram_quantile(0.99,
        sum by (le, app) (
          rate(hikaricp_connections_acquire_seconds_bucket[5m])
        )
      )
    labels:
      signal: latency
      component: database_connection
      percentile: p99

# JVM Recording Rules - Application Health
- name: jvm_recording_rules
  interval: 30s
  rules:
  # JVM Memory utilization
  - record: service:jvm:memory_utilization_percent
    expr: |
      (
        jvm_memory_used_bytes{area="heap"}
        /
        jvm_memory_max_bytes{area="heap"}
      ) * 100
    labels:
      signal: utilization
      component: jvm_memory

  # JVM GC time percentage
  - record: service:jvm:gc_time_percent
    expr: |
      (
        rate(jvm_gc_collection_seconds_sum[5m])
        /
        rate(jvm_gc_collection_seconds_count[5m])
      ) * 100
    labels:
      signal: utilization
      component: jvm_gc

  # JVM Thread count
  - record: service:jvm:threads_active
    expr: |
      jvm_threads_current
    labels:
      signal: utilization
      component: jvm_threads

# Business Logic Recording Rules - MTN Specific
- name: business_logic_recording_rules
  interval: 30s
  rules:
  # Application submission rate
  - record: business:application:submission_rate
    expr: |
      sum by (app) (
        rate(application_submissions_total[5m])
      )
    labels:
      signal: throughput
      component: business_logic

  # Application processing success rate
  - record: business:application:success_rate
    expr: |
      (
        sum by (app) (rate(application_submissions_total{status="success"}[5m]))
        /
        sum by (app) (rate(application_submissions_total[5m]))
      ) * 100
    labels:
      signal: success_rate
      component: business_logic

  # Evaluation completion rate
  - record: business:evaluation:completion_rate
    expr: |
      sum by (app) (
        rate(evaluations_completed_total[5m])
      )
    labels:
      signal: throughput
      component: evaluation

  # Email notification delivery rate
  - record: business:notification:delivery_rate
    expr: |
      sum by (app) (
        rate(email_notifications_sent_total{status="delivered"}[5m])
      )
    labels:
      signal: throughput
      component: notification

  # User authentication success rate  
  - record: business:auth:success_rate
    expr: |
      (
        sum by (app) (rate(user_authentication_attempts_total{result="success"}[5m]))
        /
        sum by (app) (rate(user_authentication_attempts_total[5m]))
      ) * 100
    labels:
      signal: success_rate
      component: authentication