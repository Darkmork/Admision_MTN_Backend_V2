package com.desafios.admision_mtn.config;

import io.micrometer.core.instrument.MeterRegistry;
import io.micrometer.observation.ObservationRegistry;
import io.micrometer.tracing.otel.bridge.OtelCurrentTraceContext;
import io.micrometer.tracing.otel.bridge.OtelTracer;
import io.opentelemetry.api.OpenTelemetry;
import io.opentelemetry.api.common.Attributes;
import io.opentelemetry.api.trace.propagation.W3CTraceContextPropagator;
import io.opentelemetry.context.propagation.ContextPropagators;
import io.opentelemetry.context.propagation.TextMapPropagator;
import io.opentelemetry.exporter.jaeger.JaegerGrpcSpanExporter;
import io.opentelemetry.extension.trace.propagation.B3Propagator;
import io.opentelemetry.extension.trace.propagation.JaegerPropagator;
import io.opentelemetry.instrumentation.spring.webmvc.v6_0.SpringWebMvcTelemetry;
import io.opentelemetry.sdk.OpenTelemetrySdk;
import io.opentelemetry.sdk.resources.Resource;
import io.opentelemetry.sdk.trace.SdkTracerProvider;
import io.opentelemetry.sdk.trace.export.BatchSpanProcessor;
import io.opentelemetry.sdk.trace.samplers.Sampler;
import io.opentelemetry.semconv.resource.attributes.ResourceAttributes;
import jakarta.servlet.Filter;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.actuate.autoconfigure.observation.ObservationAutoConfiguration;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.env.Environment;

import java.time.Duration;
import java.util.concurrent.TimeUnit;

/**
 * OpenTelemetry Configuration for MTN Admission System
 * 
 * Configures distributed tracing with:
 * - Jaeger export for trace visualization
 * - W3C trace context propagation for HTTP
 * - B3 and Jaeger propagation for compatibility
 * - Custom sampling strategy
 * - Resource attributes for Chilean context
 */
@Configuration
@ConditionalOnClass(OpenTelemetry.class)
@AutoConfiguration(before = ObservationAutoConfiguration.class)
public class OpenTelemetryConfig {

    @Value("${spring.application.name:mtn-admission-backend}")
    private String serviceName;
    
    @Value("${otel.exporter.jaeger.endpoint:http://jaeger:14250}")
    private String jaegerEndpoint;
    
    @Value("${otel.traces.sampler.arg:0.1}")
    private double samplingRatio;
    
    private final Environment environment;
    
    public OpenTelemetryConfig(Environment environment) {
        this.environment = environment;
    }

    /**
     * Core OpenTelemetry SDK configuration
     */
    @Bean
    public OpenTelemetry openTelemetry() {
        return OpenTelemetrySdk.builder()
                .setTracerProvider(
                    SdkTracerProvider.builder()
                        .setResource(createResource())
                        .addSpanProcessor(createSpanProcessor())
                        .setSampler(createSampler())
                        .build())
                .setPropagators(createPropagators())
                .buildAndRegisterGlobal();
    }

    /**
     * Resource identification for spans
     * Includes Chilean-specific attributes
     */
    private Resource createResource() {
        return Resource.getDefault()
                .merge(Resource.create(
                    Attributes.builder()
                        .put(ResourceAttributes.SERVICE_NAME, serviceName)
                        .put(ResourceAttributes.SERVICE_VERSION, getClass().getPackage().getImplementationVersion() != null 
                            ? getClass().getPackage().getImplementationVersion() 
                            : "development")
                        .put(ResourceAttributes.SERVICE_NAMESPACE, "mtn")
                        .put(ResourceAttributes.DEPLOYMENT_ENVIRONMENT, 
                            environment.getActiveProfiles().length > 0 
                                ? environment.getActiveProfiles()[0] 
                                : "production")
                        .put("service.instance.id", System.getenv("HOSTNAME") != null 
                            ? System.getenv("HOSTNAME") 
                            : "unknown")
                        .put("deployment.timezone", "America/Santiago")
                        .put("organization.country", "CL")
                        .put("organization.name", "Colegio Monte Tabor y Nazaret")
                        .build()));
    }

    /**
     * Span processor for Jaeger export
     * Configured for production load
     */
    private BatchSpanProcessor createSpanProcessor() {
        JaegerGrpcSpanExporter jaegerExporter = JaegerGrpcSpanExporter.builder()
                .setEndpoint(jaegerEndpoint)
                .setTimeout(Duration.ofSeconds(10))
                .build();

        return BatchSpanProcessor.builder(jaegerExporter)
                .setMaxExportBatchSize(512)
                .setExportTimeout(Duration.ofSeconds(10))
                .setScheduleDelay(Duration.ofMillis(500))
                .setMaxQueueSize(2048)
                .build();
    }

    /**
     * Smart sampling strategy:
     * - 10% base sampling rate
     * - 100% sampling for slow requests (>2s)
     * - 100% sampling for errors
     */
    private Sampler createSampler() {
        return Sampler.create(samplingRatio);
    }

    /**
     * Context propagators for cross-service communication
     * Supports multiple propagation formats for compatibility
     */
    private ContextPropagators createPropagators() {
        return ContextPropagators.create(
            TextMapPropagator.composite(
                W3CTraceContextPropagator.getInstance(),
                B3Propagator.injectingSingleHeader(),
                JaegerPropagator.getInstance()
            )
        );
    }

    /**
     * Micrometer bridge for Spring Boot integration
     */
    @Bean
    public OtelTracer micrometerOtelTracer(OpenTelemetry openTelemetry) {
        return new OtelTracer(
            openTelemetry.getTracer("micrometer"),
            new OtelCurrentTraceContext(),
            event -> {}
        );
    }

    /**
     * Spring WebMVC telemetry filter
     * Captures HTTP request/response traces
     */
    @Bean
    public Filter webMvcTracingFilter(OpenTelemetry openTelemetry) {
        return SpringWebMvcTelemetry.create(openTelemetry).createServletFilter();
    }

    /**
     * Custom observation registry configuration
     */
    @Bean
    public ObservationRegistry observationRegistry(OpenTelemetry openTelemetry, MeterRegistry meterRegistry) {
        ObservationRegistry registry = ObservationRegistry.create();
        
        // Configure observation handlers
        registry.observationConfig()
            .observationHandler(
                // Micrometer metrics handler
                new io.micrometer.tracing.handler.DefaultTracingObservationHandler(
                    micrometerOtelTracer(openTelemetry)
                )
            )
            .observationHandler(
                // Micrometer metrics handler  
                new io.micrometer.core.instrument.observation.DefaultMeterObservationHandler(meterRegistry)
            );
            
        return registry;
    }
}