package com.desafios.admision_mtn.config;

import com.desafios.admision_mtn.util.TraceCorrelationUtil;
import io.micrometer.tracing.Span;
import io.micrometer.tracing.Tracer;
import org.springframework.amqp.core.*;
import org.springframework.amqp.rabbit.connection.ConnectionFactory;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.amqp.rabbit.listener.RabbitListenerContainerFactory;
import org.springframework.amqp.rabbit.listener.SimpleRabbitListenerContainerFactory;
import org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.HashMap;
import java.util.Map;

/**
 * RabbitMQ configuration with distributed tracing support
 * 
 * Features:
 * - Trace context propagation via AMQP headers
 * - Message correlation with OpenTelemetry spans
 * - Dead letter queue monitoring
 * - Business context injection
 * - Chilean compliance for message tracing
 */
@Configuration
public class RabbitMQTracingConfig {
    
    @Autowired
    private TraceCorrelationUtil traceUtil;
    
    @Autowired 
    private Tracer tracer;

    /**
     * RabbitTemplate with tracing capabilities
     */
    @Bean
    public RabbitTemplate rabbitTemplate(ConnectionFactory connectionFactory) {
        RabbitTemplate template = new RabbitTemplate(connectionFactory);
        template.setMessageConverter(new Jackson2JsonMessageConverter());
        
        // Add message post processor for trace propagation
        template.setBeforePublishPostProcessors(message -> {
            // Add correlation headers for tracing
            String correlationId = traceUtil.getCurrentCorrelationId();
            if (correlationId != null) {
                message.getMessageProperties().getHeaders().put("correlationId", correlationId);
            }
            
            String traceId = traceUtil.getCurrentTraceId();
            if (traceId != null) {
                message.getMessageProperties().getHeaders().put("traceId", traceId);
            }
            
            // Add timestamp for message age tracking
            message.getMessageProperties().getHeaders().put("publishTimestamp", System.currentTimeMillis());
            
            // Add business context
            Span currentSpan = tracer.currentSpan();
            if (currentSpan != null) {
                currentSpan.tag("messaging.system", "rabbitmq");
                currentSpan.tag("messaging.operation", "publish");
                currentSpan.tag("messaging.destination.name", 
                    message.getMessageProperties().getReceivedExchange() != null 
                        ? message.getMessageProperties().getReceivedExchange() 
                        : "unknown");
            }
            
            return message;
        });
        
        return template;
    }

    /**
     * Listener container factory with tracing
     */
    @Bean
    public RabbitListenerContainerFactory<?> rabbitListenerContainerFactory(ConnectionFactory connectionFactory) {
        SimpleRabbitListenerContainerFactory factory = new SimpleRabbitListenerContainerFactory();
        factory.setConnectionFactory(connectionFactory);
        factory.setMessageConverter(new Jackson2JsonMessageConverter());
        
        // Configure concurrency for performance
        factory.setConcurrentConsumers(2);
        factory.setMaxConcurrentConsumers(10);
        factory.setPrefetchCount(10);
        
        // Add message post processor for trace extraction
        factory.setAfterReceivePostProcessors(message -> {
            // Extract correlation context from message headers
            Map<String, Object> headers = message.getMessageProperties().getHeaders();
            
            String correlationId = (String) headers.get("correlationId");
            if (correlationId != null) {
                traceUtil.setCorrelationId(correlationId);
            }
            
            // Start new span for message processing
            Span messageSpan = tracer.nextSpan()
                .name("rabbitmq.message.process")
                .tag("messaging.system", "rabbitmq")
                .tag("messaging.operation", "process")
                .tag("messaging.destination.name", 
                    message.getMessageProperties().getConsumerQueue() != null 
                        ? message.getMessageProperties().getConsumerQueue() 
                        : "unknown");
            
            if (correlationId != null) {
                messageSpan.tag("correlation.id", correlationId);
            }
            
            // Calculate message age
            Long publishTimestamp = (Long) headers.get("publishTimestamp");
            if (publishTimestamp != null) {
                long messageAge = System.currentTimeMillis() - publishTimestamp;
                messageSpan.tag("messaging.message.age_ms", String.valueOf(messageAge));
                
                // Alert on old messages (>5 minutes)
                if (messageAge > 300000) {
                    messageSpan.tag("messaging.message.stale", "true");
                }
            }
            
            messageSpan.start();
            
            return message;
        });
        
        return factory;
    }

    // Queue Definitions with DLQ support

    /**
     * Application submission queue with DLQ
     */
    @Bean
    public Queue applicationQueue() {
        Map<String, Object> args = new HashMap<>();
        args.put("x-dead-letter-exchange", "mtn.dlx");
        args.put("x-dead-letter-routing-key", "application.dlq");
        args.put("x-message-ttl", 3600000); // 1 hour TTL
        return QueueBuilder.durable("mtn.applications")
                .withArguments(args)
                .build();
    }

    @Bean
    public Queue applicationDlq() {
        return QueueBuilder.durable("mtn.applications.dlq").build();
    }

    /**
     * Evaluation queue with DLQ
     */
    @Bean
    public Queue evaluationQueue() {
        Map<String, Object> args = new HashMap<>();
        args.put("x-dead-letter-exchange", "mtn.dlx");
        args.put("x-dead-letter-routing-key", "evaluation.dlq");
        args.put("x-message-ttl", 7200000); // 2 hour TTL
        return QueueBuilder.durable("mtn.evaluations")
                .withArguments(args)
                .build();
    }

    @Bean
    public Queue evaluationDlq() {
        return QueueBuilder.durable("mtn.evaluations.dlq").build();
    }

    /**
     * Notification queue with DLQ
     */
    @Bean
    public Queue notificationQueue() {
        Map<String, Object> args = new HashMap<>();
        args.put("x-dead-letter-exchange", "mtn.dlx");
        args.put("x-dead-letter-routing-key", "notification.dlq");
        args.put("x-message-ttl", 1800000); // 30 minutes TTL
        return QueueBuilder.durable("mtn.notifications")
                .withArguments(args)
                .build();
    }

    @Bean
    public Queue notificationDlq() {
        return QueueBuilder.durable("mtn.notifications.dlq").build();
    }

    // Exchanges

    /**
     * Main topic exchange for MTN events
     */
    @Bean
    public TopicExchange mtnExchange() {
        return ExchangeBuilder.topicExchange("mtn.events")
                .durable(true)
                .build();
    }

    /**
     * Dead letter exchange
     */
    @Bean
    public DirectExchange dlxExchange() {
        return ExchangeBuilder.directExchange("mtn.dlx")
                .durable(true)
                .build();
    }

    // Bindings

    @Bean
    public Binding applicationBinding() {
        return BindingBuilder
                .bind(applicationQueue())
                .to(mtnExchange())
                .with("application.*");
    }

    @Bean
    public Binding evaluationBinding() {
        return BindingBuilder
                .bind(evaluationQueue())
                .to(mtnExchange())
                .with("evaluation.*");
    }

    @Bean
    public Binding notificationBinding() {
        return BindingBuilder
                .bind(notificationQueue())
                .to(mtnExchange())
                .with("notification.*");
    }

    // DLQ Bindings
    
    @Bean
    public Binding applicationDlqBinding() {
        return BindingBuilder
                .bind(applicationDlq())
                .to(dlxExchange())
                .with("application.dlq");
    }

    @Bean
    public Binding evaluationDlqBinding() {
        return BindingBuilder
                .bind(evaluationDlq())
                .to(dlxExchange())
                .with("evaluation.dlq");
    }

    @Bean
    public Binding notificationDlqBinding() {
        return BindingBuilder
                .bind(notificationDlq())
                .to(dlxExchange())
                .with("notification.dlq");
    }
}