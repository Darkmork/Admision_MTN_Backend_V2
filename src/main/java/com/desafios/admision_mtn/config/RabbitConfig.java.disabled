// src/main/java/com/desafios/admision_mtn/config/RabbitConfig.java

package com.desafios.admision_mtn.config;

import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.extern.slf4j.Slf4j;
import org.springframework.amqp.core.TopicExchange;
import org.springframework.amqp.rabbit.annotation.EnableRabbit;
import org.springframework.amqp.rabbit.connection.ConnectionFactory;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

/**
 * Configuración de RabbitMQ para el monolito (productor de notificaciones)
 */
@Slf4j
@Configuration
@EnableRabbit
@ConditionalOnProperty(name = "notifications.messaging.enabled", havingValue = "true", matchIfMissing = true)
public class RabbitConfig {

    public static final String NOTIFICATIONS_EXCHANGE = "notifications.x";

    /**
     * Exchange principal para notificaciones
     */
    @Bean
    public TopicExchange notificationsExchange() {
        log.info("Configurando exchange de notificaciones: {}", NOTIFICATIONS_EXCHANGE);
        return new TopicExchange(NOTIFICATIONS_EXCHANGE, true, false);
    }

    /**
     * RabbitTemplate con configuración optimizada para el productor
     */
    @Bean
    public RabbitTemplate rabbitTemplate(ConnectionFactory connectionFactory, ObjectMapper objectMapper) {
        RabbitTemplate template = new RabbitTemplate(connectionFactory);
        
        // Configurar converter JSON
        template.setMessageConverter(jackson2JsonMessageConverter(objectMapper));
        
        // Configurar exchange por defecto
        template.setExchange(NOTIFICATIONS_EXCHANGE);
        
        // Habilitar confirmaciones del publisher
        template.setConfirmCallback((correlationData, ack, cause) -> {
            if (ack) {
                log.debug("Mensaje confirmado por broker: {}", correlationData != null ? correlationData.getId() : "unknown");
            } else {
                log.error("Mensaje rechazado por broker: {} - Causa: {}", 
                         correlationData != null ? correlationData.getId() : "unknown", cause);
            }
        });
        
        // Configurar callback para mensajes devueltos
        template.setReturnsCallback(returnedMessage -> {
            log.warn("Mensaje devuelto por broker - Exchange: {}, Routing Key: {}, Reply Text: {}", 
                    returnedMessage.getExchange(),
                    returnedMessage.getRoutingKey(),
                    returnedMessage.getReplyText());
        });
        
        // Configurar timeouts
        template.setReceiveTimeout(5000);
        template.setReplyTimeout(5000);
        
        log.info("RabbitTemplate configurado para notificaciones");
        return template;
    }

    /**
     * Converter JSON para mensajes
     */
    @Bean
    public Jackson2JsonMessageConverter jackson2JsonMessageConverter(ObjectMapper objectMapper) {
        Jackson2JsonMessageConverter converter = new Jackson2JsonMessageConverter(objectMapper);
        converter.setCreateMessageIds(true);
        return converter;
    }

    /**
     * Configuración de conexión con retry automático
     */
    @Bean
    @ConditionalOnProperty(name = "notifications.messaging.retry.enabled", havingValue = "true", matchIfMissing = true)
    public RabbitConnectionConfig rabbitConnectionConfig() {
        return new RabbitConnectionConfig();
    }

    /**
     * Clase de configuración para la conexión
     */
    public static class RabbitConnectionConfig {
        public RabbitConnectionConfig() {
            log.info("Configuración de conexión RabbitMQ inicializada");
            log.info("Exchange de notificaciones: {}", NOTIFICATIONS_EXCHANGE);
            log.info("Confirmaciones de publisher habilitadas");
            log.info("Callbacks de retorno configurados");
        }
    }
}