package com.desafios.admision_mtn.service;

import com.desafios.admision_mtn.util.TraceCorrelationUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.slf4j.MDC;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 * Business event logging service for MTN Admission System
 * 
 * Provides structured logging for business events with:
 * - Audit trail for security events
 * - Business process tracking
 * - Trace correlation for observability
 * - PII-safe logging for Chilean compliance
 */
@Service
public class BusinessLogger {
    
    private static final Logger auditLogger = LoggerFactory.getLogger("AUDIT");
    private static final Logger businessLogger = LoggerFactory.getLogger("BUSINESS");
    private static final Logger logger = LoggerFactory.getLogger(BusinessLogger.class);
    
    private final TraceCorrelationUtil traceUtil;
    
    @Autowired
    public BusinessLogger(TraceCorrelationUtil traceUtil) {
        this.traceUtil = traceUtil;
    }
    
    /**
     * Log authentication events for security audit
     */
    public void logAuthenticationEvent(String event, String userEmail, String ipAddress, boolean success) {
        try {
            // Ensure trace context
            traceUtil.updateMdcFromTraceContext();
            
            // Add security context to MDC
            MDC.put("event.type", "authentication");
            MDC.put("event.name", event);
            MDC.put("user.hash", userEmail != null ? Integer.toString(userEmail.hashCode()) : "anonymous");
            MDC.put("client.ip", maskIpAddress(ipAddress));
            MDC.put("event.success", Boolean.toString(success));
            
            // Log with appropriate level
            if (success) {
                auditLogger.info("Authentication successful: {} for user: *** IP: {}", 
                    event, maskEmail(userEmail), maskIpAddress(ipAddress));
            } else {
                auditLogger.warn("Authentication failed: {} for user: *** IP: {}", 
                    event, maskEmail(userEmail), maskIpAddress(ipAddress));
            }
            
            // Add to trace context
            traceUtil.addBusinessEvent("authentication_" + event, success ? "SUCCESS" : "FAILED");
            
        } finally {
            // Clean up MDC
            MDC.remove("event.type");
            MDC.remove("event.name");
            MDC.remove("user.hash");
            MDC.remove("client.ip");
            MDC.remove("event.success");
        }
    }
    
    /**
     * Log application submission events
     */
    public void logApplicationEvent(String event, Long applicationId, String applicantEmail, String status) {
        try {
            // Ensure trace context
            traceUtil.updateMdcFromTraceContext();
            
            // Add application context to MDC
            MDC.put("event.type", "application");
            MDC.put("event.name", event);
            MDC.put("application.id", applicationId != null ? applicationId.toString() : "unknown");
            MDC.put("applicant.hash", applicantEmail != null ? Integer.toString(applicantEmail.hashCode()) : "anonymous");
            MDC.put("application.status", status != null ? status : "unknown");
            
            businessLogger.info("Application event: {} - ID: {} Status: {} Applicant: ***", 
                event, applicationId, status, maskEmail(applicantEmail));
            
            // Add to trace context
            traceUtil.addApplicationContext(applicationId, status, null);
            traceUtil.addBusinessEvent("application_" + event, status);
            
        } finally {
            // Clean up MDC
            MDC.remove("event.type");
            MDC.remove("event.name");
            MDC.remove("application.id");
            MDC.remove("applicant.hash");
            MDC.remove("application.status");
        }
    }
    
    /**
     * Log evaluation events
     */
    public void logEvaluationEvent(String event, Long evaluationId, Long applicationId, String evaluatorRole, String result) {
        try {
            // Ensure trace context
            traceUtil.updateMdcFromTraceContext();
            
            // Add evaluation context to MDC
            MDC.put("event.type", "evaluation");
            MDC.put("event.name", event);
            MDC.put("evaluation.id", evaluationId != null ? evaluationId.toString() : "unknown");
            MDC.put("application.id", applicationId != null ? applicationId.toString() : "unknown");
            MDC.put("evaluator.role", evaluatorRole != null ? evaluatorRole : "unknown");
            MDC.put("evaluation.result", result != null ? result : "pending");
            
            businessLogger.info("Evaluation event: {} - EvalID: {} AppID: {} Role: {} Result: {}", 
                event, evaluationId, applicationId, evaluatorRole, result);
            
            // Add to trace context
            traceUtil.addEvaluationContext("ACADEMIC", evaluatorRole, result);
            traceUtil.addBusinessEvent("evaluation_" + event, result != null ? result : "PENDING");
            
        } finally {
            // Clean up MDC
            MDC.remove("event.type");
            MDC.remove("event.name");
            MDC.remove("evaluation.id");
            MDC.remove("application.id");
            MDC.remove("evaluator.role");
            MDC.remove("evaluation.result");
        }
    }
    
    /**
     * Log document upload events
     */
    public void logDocumentEvent(String event, Long applicationId, String documentType, String fileName, long fileSize) {
        try {
            // Ensure trace context
            traceUtil.updateMdcFromTraceContext();
            
            // Add document context to MDC
            MDC.put("event.type", "document");
            MDC.put("event.name", event);
            MDC.put("application.id", applicationId != null ? applicationId.toString() : "unknown");
            MDC.put("document.type", documentType != null ? documentType : "unknown");
            MDC.put("document.size", Long.toString(fileSize));
            
            businessLogger.info("Document event: {} - AppID: {} Type: {} File: *** Size: {} bytes", 
                event, applicationId, documentType, maskFileName(fileName), fileSize);
            
            // Add to trace context
            traceUtil.addBusinessEvent("document_" + event, documentType);
            
        } finally {
            // Clean up MDC
            MDC.remove("event.type");
            MDC.remove("event.name");
            MDC.remove("application.id");
            MDC.remove("document.type");
            MDC.remove("document.size");
        }
    }
    
    /**
     * Log notification events
     */
    public void logNotificationEvent(String event, String notificationType, String recipient, boolean success) {
        try {
            // Ensure trace context
            traceUtil.updateMdcFromTraceContext();
            
            // Add notification context to MDC
            MDC.put("event.type", "notification");
            MDC.put("event.name", event);
            MDC.put("notification.type", notificationType != null ? notificationType : "unknown");
            MDC.put("recipient.hash", recipient != null ? Integer.toString(recipient.hashCode()) : "anonymous");
            MDC.put("notification.success", Boolean.toString(success));
            
            if (success) {
                businessLogger.info("Notification sent: {} - Type: {} Recipient: ***", 
                    event, notificationType, maskEmail(recipient));
            } else {
                businessLogger.warn("Notification failed: {} - Type: {} Recipient: ***", 
                    event, notificationType, maskEmail(recipient));
            }
            
            // Add to trace context
            traceUtil.addBusinessEvent("notification_" + event, success ? "SENT" : "FAILED");
            
        } finally {
            // Clean up MDC
            MDC.remove("event.type");
            MDC.remove("event.name");
            MDC.remove("notification.type");
            MDC.remove("recipient.hash");
            MDC.remove("notification.success");
        }
    }
    
    /**
     * Log system events
     */
    public void logSystemEvent(String event, String component, String details, String severity) {
        try {
            // Ensure trace context
            traceUtil.updateMdcFromTraceContext();
            
            // Add system context to MDC
            MDC.put("event.type", "system");
            MDC.put("event.name", event);
            MDC.put("system.component", component != null ? component : "unknown");
            MDC.put("event.severity", severity != null ? severity : "INFO");
            
            // Log with appropriate level based on severity
            switch (severity != null ? severity.toUpperCase() : "INFO") {
                case "ERROR":
                    logger.error("System event: {} - Component: {} - {}", event, component, details);
                    break;
                case "WARN":
                    logger.warn("System event: {} - Component: {} - {}", event, component, details);
                    break;
                default:
                    logger.info("System event: {} - Component: {} - {}", event, component, details);
                    break;
            }
            
            // Add to trace context
            traceUtil.addBusinessEvent("system_" + event, severity);
            
        } finally {
            // Clean up MDC
            MDC.remove("event.type");
            MDC.remove("event.name");
            MDC.remove("system.component");
            MDC.remove("event.severity");
        }
    }
    
    // PII masking utilities
    
    private String maskEmail(String email) {
        if (email == null || email.isEmpty()) {
            return "unknown";
        }
        
        int atIndex = email.indexOf('@');
        if (atIndex <= 0) {
            return "***@***";
        }
        
        String localPart = email.substring(0, atIndex);
        if (localPart.length() <= 3) {
            return localPart.charAt(0) + "***@***";
        }
        
        return localPart.substring(0, 3) + "***@***";
    }
    
    private String maskIpAddress(String ip) {
        if (ip == null || ip.isEmpty()) {
            return "unknown";
        }
        
        if (ip.matches("\\d+\\.\\d+\\.\\d+\\.\\d+")) {
            String[] parts = ip.split("\\.");
            if (parts.length == 4) {
                return parts[0] + "." + parts[1] + "." + parts[2] + ".***";
            }
        }
        
        return "***";
    }
    
    private String maskFileName(String fileName) {
        if (fileName == null || fileName.isEmpty()) {
            return "unknown";
        }
        
        int dotIndex = fileName.lastIndexOf('.');
        if (dotIndex > 0) {
            String extension = fileName.substring(dotIndex);
            String name = fileName.substring(0, dotIndex);
            
            if (name.length() <= 5) {
                return "***" + extension;
            }
            
            return name.substring(0, 3) + "***" + extension;
        }
        
        return fileName.length() <= 5 ? "***" : fileName.substring(0, 3) + "***";
    }
}