package com.desafios.admision_mtn.util;

import io.micrometer.tracing.Span;
import io.micrometer.tracing.TraceContext;
import io.micrometer.tracing.Tracer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.slf4j.MDC;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.UUID;
import java.util.function.Supplier;

/**
 * Utility for trace and log correlation in MTN Admission System
 * 
 * Provides:
 * - Correlation ID generation and propagation
 * - Trace context integration with SLF4J MDC
 * - Span creation with business context
 * - PII-safe attribute addition
 */
@Component
public class TraceCorrelationUtil {
    
    private static final Logger logger = LoggerFactory.getLogger(TraceCorrelationUtil.class);
    
    public static final String CORRELATION_ID_KEY = "correlationId";
    public static final String TRACE_ID_KEY = "traceId";
    public static final String SPAN_ID_KEY = "spanId";
    public static final String USER_ID_KEY = "userId";
    public static final String APPLICATION_ID_KEY = "applicationId";
    public static final String OPERATION_KEY = "operation";
    
    private final Tracer tracer;
    
    @Autowired
    public TraceCorrelationUtil(Tracer tracer) {
        this.tracer = tracer;
    }
    
    /**
     * Generate new correlation ID if not present
     */
    public String ensureCorrelationId() {
        String correlationId = MDC.get(CORRELATION_ID_KEY);
        if (correlationId == null || correlationId.isEmpty()) {
            correlationId = "mtn-" + UUID.randomUUID().toString().substring(0, 8);
            MDC.put(CORRELATION_ID_KEY, correlationId);
        }
        return correlationId;
    }
    
    /**
     * Set correlation ID and update MDC
     */
    public void setCorrelationId(String correlationId) {
        if (correlationId != null && !correlationId.isEmpty()) {
            MDC.put(CORRELATION_ID_KEY, correlationId);
        } else {
            ensureCorrelationId();
        }
    }
    
    /**
     * Update MDC with current trace context
     */
    public void updateMdcFromTraceContext() {
        Span currentSpan = tracer.currentSpan();
        if (currentSpan != null) {
            TraceContext context = currentSpan.context();
            MDC.put(TRACE_ID_KEY, context.traceId());
            MDC.put(SPAN_ID_KEY, context.spanId());
        }
        
        // Ensure correlation ID exists
        ensureCorrelationId();
    }
    
    /**
     * Create span with business context
     */
    public Span createSpan(String operationName, String userId, Long applicationId) {
        Span span = tracer.nextSpan()
            .name(operationName)
            .tag("operation", operationName);
            
        // Add business context (PII-safe)
        if (userId != null) {
            // Hash user ID for privacy
            span.tag("user.hash", Integer.toString(userId.hashCode()));
        }
        
        if (applicationId != null) {
            span.tag("application.id", applicationId.toString());
        }
        
        // Add correlation ID
        String correlationId = ensureCorrelationId();
        span.tag("correlation.id", correlationId);
        
        // Add Chilean context
        span.tag("service.country", "CL");
        span.tag("service.timezone", "America/Santiago");
        
        return span.start();
    }
    
    /**
     * Execute operation within span context
     */
    public <T> T executeWithSpan(String operationName, String userId, Long applicationId, Supplier<T> operation) {
        Span span = createSpan(operationName, userId, applicationId);
        
        try (Tracer.SpanInScope ws = tracer.withSpanInScope(span)) {
            updateMdcFromTraceContext();
            
            logger.debug("Starting operation: {} for user: {} application: {}", 
                operationName, 
                userId != null ? "***" + userId.substring(userId.length() - 3) : "anonymous",
                applicationId);
            
            T result = operation.get();
            
            span.tag("operation.success", "true");
            return result;
            
        } catch (Exception e) {
            span.tag("operation.success", "false");
            span.tag("error.type", e.getClass().getSimpleName());
            span.tag("error.message", e.getMessage() != null ? e.getMessage() : "Unknown error");
            
            logger.error("Operation failed: {} - Error: {}", operationName, e.getMessage(), e);
            throw e;
            
        } finally {
            span.end();
        }
    }
    
    /**
     * Execute void operation within span context
     */
    public void executeWithSpan(String operationName, String userId, Long applicationId, Runnable operation) {
        executeWithSpan(operationName, userId, applicationId, () -> {
            operation.run();
            return null;
        });
    }
    
    /**
     * Add business event to current span
     */
    public void addBusinessEvent(String eventName, String details) {
        Span currentSpan = tracer.currentSpan();
        if (currentSpan != null) {
            currentSpan.event(eventName);
            if (details != null && !details.isEmpty()) {
                currentSpan.tag("event.details", details);
            }
            logger.info("Business event: {} - {}", eventName, details != null ? details : "");
        }
    }
    
    /**
     * Add application-specific context
     */
    public void addApplicationContext(Long applicationId, String status, String school) {
        Span currentSpan = tracer.currentSpan();
        if (currentSpan != null) {
            if (applicationId != null) {
                currentSpan.tag("mtn.application.id", applicationId.toString());
            }
            if (status != null) {
                currentSpan.tag("mtn.application.status", status);
            }
            if (school != null) {
                currentSpan.tag("mtn.school", school);
            }
        }
    }
    
    /**
     * Add evaluation context
     */
    public void addEvaluationContext(String evaluationType, String evaluatorRole, String result) {
        Span currentSpan = tracer.currentSpan();
        if (currentSpan != null) {
            if (evaluationType != null) {
                currentSpan.tag("mtn.evaluation.type", evaluationType);
            }
            if (evaluatorRole != null) {
                currentSpan.tag("mtn.evaluator.role", evaluatorRole);
            }
            if (result != null) {
                currentSpan.tag("mtn.evaluation.result", result);
            }
        }
    }
    
    /**
     * Clear MDC context (call at end of request)
     */
    public void clearContext() {
        MDC.remove(CORRELATION_ID_KEY);
        MDC.remove(TRACE_ID_KEY);
        MDC.remove(SPAN_ID_KEY);
        MDC.remove(USER_ID_KEY);
        MDC.remove(APPLICATION_ID_KEY);
        MDC.remove(OPERATION_KEY);
    }
    
    /**
     * Get current correlation ID
     */
    public String getCurrentCorrelationId() {
        return MDC.get(CORRELATION_ID_KEY);
    }
    
    /**
     * Get current trace ID
     */
    public String getCurrentTraceId() {
        return MDC.get(TRACE_ID_KEY);
    }
}