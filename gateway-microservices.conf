# gateway-microservices.conf
# NGINX Configuration for 100% Microservices Architecture
# Routes all frontend requests to appropriate microservices

# Upstream servers (microservices)
upstream user-service {
    server user-service:8082;
}

upstream application-service {
    server application-service:8083;
}

upstream evaluation-service {
    server evaluation-service:8084;
}

upstream notification-service {
    server notification-service:8085;
}

# Health check endpoint map
map $uri $backend_service {
    default "";
    "~^/api/users" user-service;
    "~^/api/applications" application-service;
    "~^/api/evaluations" evaluation-service;
    "~^/api/notifications" notification-service;
    "~^/api/interviews" evaluation-service;
    "~^/api/auth" user-service;
    "~^/api/admin" user-service;
    "~^/api/professor" user-service;
}

server {
    listen 80;
    server_name localhost;

    # CORS Headers for all routes
    add_header 'Access-Control-Allow-Origin' 'http://localhost:5173' always;
    add_header 'Access-Control-Allow-Origin' 'http://localhost:5174' always;
    add_header 'Access-Control-Allow-Origin' 'http://localhost:5175' always;
    add_header 'Access-Control-Allow-Origin' 'http://localhost:5176' always;
    add_header 'Access-Control-Allow-Origin' 'http://localhost:5177' always;
    add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
    add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept, Authorization, Cache-Control' always;
    add_header 'Access-Control-Allow-Credentials' 'true' always;

    # Handle preflight requests
    if ($request_method = 'OPTIONS') {
        add_header 'Access-Control-Allow-Origin' 'http://localhost:5173';
        add_header 'Access-Control-Allow-Origin' 'http://localhost:5174';
        add_header 'Access-Control-Allow-Origin' 'http://localhost:5175';
        add_header 'Access-Control-Allow-Origin' 'http://localhost:5176';
        add_header 'Access-Control-Allow-Origin' 'http://localhost:5177';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept, Authorization, Cache-Control';
        add_header 'Access-Control-Allow-Credentials' 'true';
        add_header 'Access-Control-Max-Age' 1728000;
        add_header 'Content-Type' 'text/plain charset=UTF-8';
        add_header 'Content-Length' 0;
        return 204;
    }

    # Health check endpoint for the gateway itself
    location /health {
        access_log off;
        return 200 '{"status":"UP","service":"api-gateway","architecture":"microservices"}';
        add_header Content-Type application/json;
    }

    # ==========================================
    # USER SERVICE ROUTES
    # ==========================================
    
    # Authentication routes (login, register, etc.)
    location /api/auth {
        proxy_pass http://user-service;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Timeout settings for auth operations
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }

    # User management routes
    location /api/users {
        proxy_pass http://user-service;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # User service specific headers
        proxy_set_header X-Service-Name "user-service";
    }

    # Admin routes (user management)
    location /api/admin {
        proxy_pass http://user-service;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Admin specific headers
        proxy_set_header X-Service-Name "user-service";
        proxy_set_header X-Admin-Request "true";
    }

    # Professor routes
    location /api/professor {
        proxy_pass http://user-service;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Professor specific headers
        proxy_set_header X-Service-Name "user-service";
        proxy_set_header X-Professor-Request "true";
    }

    # ==========================================
    # APPLICATION SERVICE ROUTES
    # ==========================================
    
    # Applications management
    location /api/applications {
        proxy_pass http://application-service;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Application service specific headers
        proxy_set_header X-Service-Name "application-service";
        
        # Longer timeout for file uploads
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Increase body size for document uploads
        client_max_body_size 50M;
    }

    # Students management (part of applications)
    location /api/students {
        proxy_pass http://application-service;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        proxy_set_header X-Service-Name "application-service";
    }

    # Parents and guardians (part of applications)
    location /api/parents {
        proxy_pass http://application-service;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        proxy_set_header X-Service-Name "application-service";
    }

    location /api/guardians {
        proxy_pass http://application-service;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        proxy_set_header X-Service-Name "application-service";
    }

    # ==========================================
    # EVALUATION SERVICE ROUTES
    # ==========================================
    
    # Evaluations management
    location /api/evaluations {
        proxy_pass http://evaluation-service;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Evaluation service specific headers
        proxy_set_header X-Service-Name "evaluation-service";
    }

    # Interviews management
    location /api/interviews {
        proxy_pass http://evaluation-service;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Interview service specific headers
        proxy_set_header X-Service-Name "evaluation-service";
        proxy_set_header X-Interview-Request "true";
    }

    # Reports (evaluation-based reports)
    location /api/reports {
        proxy_pass http://evaluation-service;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        proxy_set_header X-Service-Name "evaluation-service";
    }

    # ==========================================
    # NOTIFICATION SERVICE ROUTES
    # ==========================================
    
    # Email and notification management
    location /api/notifications {
        proxy_pass http://notification-service;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Notification service specific headers
        proxy_set_header X-Service-Name "notification-service";
        
        # Longer timeout for email operations
        proxy_connect_timeout 45s;
        proxy_send_timeout 45s;
        proxy_read_timeout 45s;
    }

    # Email templates and management
    location /api/email {
        proxy_pass http://notification-service;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        proxy_set_header X-Service-Name "notification-service";
    }

    # ==========================================
    # FILE UPLOAD AND STATIC FILES
    # ==========================================
    
    # Document uploads (routed to application service)
    location /api/documents {
        proxy_pass http://application-service;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        proxy_set_header X-Service-Name "application-service";
        
        # File upload specific settings
        client_max_body_size 100M;
        proxy_connect_timeout 300s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
        proxy_request_buffering off;
    }

    # Static file serving (if needed)
    location /uploads {
        alias /var/www/uploads;
        autoindex off;
        expires 1d;
        add_header Cache-Control "public, immutable";
    }

    # ==========================================
    # ERROR HANDLING AND FALLBACKS
    # ==========================================
    
    # Default location for unmatched routes
    location / {
        return 404 '{"error":"Route not found in microservices architecture","gateway":"nginx","timestamp":"$time_iso8601"}';
        add_header Content-Type application/json;
    }

    # Custom error pages
    error_page 502 503 504 /50x.html;
    location = /50x.html {
        return 502 '{"error":"Service temporarily unavailable","gateway":"nginx","timestamp":"$time_iso8601","suggestion":"Check if microservices are running"}';
        add_header Content-Type application/json;
    }

    # ==========================================
    # MONITORING AND DEBUG
    # ==========================================
    
    # Gateway status endpoint
    location /gateway/status {
        access_log off;
        return 200 '{"gateway":"nginx","architecture":"100% microservices","services":["user-service","application-service","evaluation-service","notification-service"],"timestamp":"$time_iso8601"}';
        add_header Content-Type application/json;
    }

    # Service health aggregation
    location /gateway/services-health {
        access_log off;
        content_by_lua_block {
            local http = require "resty.http"
            local cjson = require "cjson"
            local httpc = http.new()
            
            local services = {
                {name = "user-service", url = "http://user-service:8082/api/users/health"},
                {name = "application-service", url = "http://application-service:8083/api/applications/health"},
                {name = "evaluation-service", url = "http://evaluation-service:8084/api/evaluations/health"},
                {name = "notification-service", url = "http://notification-service:8085/api/notifications/health"}
            }
            
            local results = {}
            for _, service in ipairs(services) do
                local res, err = httpc:request_uri(service.url, {
                    method = "GET",
                    timeout = 5000
                })
                if res and res.status == 200 then
                    results[service.name] = {status = "UP", response_time = "< 5s"}
                else
                    results[service.name] = {status = "DOWN", error = err or "Service unavailable"}
                end
            end
            
            ngx.header["Content-Type"] = "application/json"
            ngx.say(cjson.encode({
                gateway = "nginx",
                architecture = "100% microservices",
                services = results,
                timestamp = ngx.utctime()
            }))
        }
    }

    # Access log format for debugging
    access_log /var/log/nginx/access.log combined;
    error_log /var/log/nginx/error.log warn;
}