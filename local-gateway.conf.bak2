# Local NGINX Configuration for Microservices - OPTIMIZED
# Changes: Reduced timeouts, increased buffers, added keepalive, rate limiting, Guardian service

events {
    worker_connections 4096;
    multi_accept on;              # Accept multiple connections simultaneously
    use kqueue;                   # I/O event method (macOS - use epoll on Linux)
}

http {
    include       /opt/homebrew/etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Performance optimizations
    sendfile on;                  # Kernel-level file copying
    tcp_nopush on;                # Reduce packets sent
    tcp_nodelay on;               # Don't buffer data-sends (disables Nagle's algorithm)

    # Rate limiting zones (PRODUCTION OPTIMIZED)
    # General API rate limit (100 requests per minute per IP)
    limit_req_zone $binary_remote_addr zone=api_general:10m rate=100r/m;

    # Authentication endpoints (stricter - 20 requests per minute per IP)
    limit_req_zone $binary_remote_addr zone=api_auth:10m rate=20r/m;

    # Public endpoints (more permissive - 200 requests per minute per IP)
    limit_req_zone $binary_remote_addr zone=api_public:10m rate=200r/m;

    # Legacy rate limiting (keeping for backward compatibility)
    limit_req_zone $binary_remote_addr zone=api_by_ip:10m rate=20r/s;
    limit_req_zone $http_authorization zone=api_by_token:10m rate=100r/s;
    limit_conn_zone $binary_remote_addr zone=conn_by_ip:10m;

    # Request size limits
    client_max_body_size 10M;       # Global default (override per location)
    client_body_buffer_size 256k;   # Buffer before writing to disk

    # Timeouts optimized (aligned with circuit breaker 5s)
    keepalive_timeout 65;
    client_body_timeout 12;
    client_header_timeout 12;
    send_timeout 15;                # Increased to allow frontend retries

    # Proxy timeouts (CRITICAL: align with circuit breaker)
    proxy_connect_timeout 3s;       # Reduced - connection must be fast
    proxy_send_timeout 10s;         # Send request to backend
    proxy_read_timeout 8s;          # CRITICAL: 5s CB + 3s margin

    # Buffer settings (optimized for large payloads)
    proxy_buffering on;
    proxy_buffer_size 8k;           # First part of response
    proxy_buffers 16 8k;            # 16 buffers x 8KB = 128KB total
    proxy_busy_buffers_size 16k;    # Busy buffers sending to client

    # Keepalive upstream connections (reduce TCP handshakes)
    proxy_http_version 1.1;
    proxy_set_header Connection "";  # Reuse connections

    # Compression (reduce bytes transferred)
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_min_length 1024;
    gzip_types application/json text/plain text/css application/javascript
               text/xml application/xml application/xml+rss text/javascript
               application/vnd.ms-fontobject application/x-font-ttf
               font/opentype image/svg+xml;
    gzip_comp_level 6;
    gzip_disable "msie6";

    # Map for allowed CORS origins
    map $http_origin $cors_origin {
        default "";
        "~^http://localhost:5173$" $http_origin;
        "~^http://localhost:5174$" $http_origin;
        "~^http://127.0.0.1:5173$" $http_origin;
        "~^http://127.0.0.1:5174$" $http_origin;
    }

    # CORS headers centralized
    map $request_method $cors_methods {
        default "GET, POST, PUT, DELETE, OPTIONS";
    }

    map $request_method $cors_headers {
        default "Origin, X-Requested-With, Content-Type, Accept, Authorization, Cache-Control, x-correlation-id, x-request-time, x-timezone, x-client-type, x-client-version, X-CSRF-Token, CSRF-Token";
    }

    # Upstream servers (microservices) - OPTIMIZED
    upstream user-service {
        server localhost:8082 max_fails=2 fail_timeout=10s weight=1;
        keepalive 32;
        keepalive_requests 100;      # Reuse each connection up to 100 requests
        keepalive_timeout 60s;
    }

    upstream application-service {
        server localhost:8083 max_fails=2 fail_timeout=10s weight=1;
        keepalive 32;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }

    upstream evaluation-service {
        server localhost:8084 max_fails=2 fail_timeout=10s weight=1;
        keepalive 32;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }

    upstream notification-service {
        server localhost:8085 max_fails=2 fail_timeout=10s weight=1;
        keepalive 32;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }

    upstream dashboard-service {
        server localhost:8086 max_fails=2 fail_timeout=10s weight=1;
        keepalive 32;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }

    # NEW: Guardian service upstream (port 8087, NOT 8085)
    upstream guardian-service {
        server localhost:8087 max_fails=2 fail_timeout=10s weight=1;
        keepalive 32;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }

    server {
        listen 8080;
        server_name localhost;

        # Rate limiting global
        limit_req zone=api_by_ip burst=40 nodelay;
        limit_req zone=api_by_token burst=200 nodelay;
        limit_conn conn_by_ip 20;

        # Security headers centralized
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-Frame-Options "DENY" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;

        # Static file caching (images, fonts, CSS, JS)
        location ~* \.(jpg|jpeg|png|gif|ico|css|js|woff|woff2|ttf|svg|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            access_log off;
        }

        # Health check endpoint for the gateway itself
        location /health {
            # Public endpoint rate limiting (more permissive)
            limit_req zone=api_public burst=50 nodelay;

            access_log off;
            add_header 'Access-Control-Allow-Origin' '$cors_origin' always;
            add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' '$cors_headers' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;

            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '$cors_origin';
                add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS';
                add_header 'Access-Control-Allow-Headers' '$cors_headers';
                add_header 'Access-Control-Allow-Credentials' 'true';
                add_header 'Access-Control-Max-Age' '86400';
                return 204;
            }

            return 200 '{"status":"UP","service":"api-gateway","architecture":"microservices"}';
            add_header Content-Type application/json;
        }

        # Authentication routes (login, register, etc.)
        location /api/auth {
            # STRICT rate limiting for auth endpoints (prevents brute force)
            limit_req zone=api_auth burst=5 nodelay;

            add_header 'Access-Control-Allow-Origin' '$cors_origin' always;
            add_header 'Access-Control-Allow-Methods' '$cors_methods' always;
            add_header 'Access-Control-Allow-Headers' '$cors_headers' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;

            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '$cors_origin';
                add_header 'Access-Control-Allow-Methods' '$cors_methods';
                add_header 'Access-Control-Allow-Headers' '$cors_headers';
                add_header 'Access-Control-Allow-Credentials' 'true';
                add_header 'Access-Control-Max-Age' '86400';
                return 204;
            }

            proxy_pass http://user-service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;
            proxy_set_header Cookie $http_cookie;
        }

        # User management routes
        location /api/users {
            # General API rate limiting
            limit_req zone=api_general burst=20 nodelay;

            add_header 'Access-Control-Allow-Origin' '$cors_origin' always;
            add_header 'Access-Control-Allow-Methods' '$cors_methods' always;
            add_header 'Access-Control-Allow-Headers' '$cors_headers' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;

            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '$cors_origin';
                add_header 'Access-Control-Allow-Methods' '$cors_methods';
                add_header 'Access-Control-Allow-Headers' '$cors_headers';
                add_header 'Access-Control-Allow-Credentials' 'true';
                add_header 'Access-Control-Max-Age' '86400';
                return 204;
            }

            proxy_pass http://user-service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;
            proxy_set_header Cookie $http_cookie;
        }

        # Applications management
        location /api/applications {
            add_header 'Access-Control-Allow-Origin' '$cors_origin' always;
            add_header 'Access-Control-Allow-Methods' '$cors_methods' always;
            add_header 'Access-Control-Allow-Headers' '$cors_headers' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;

            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '$cors_origin';
                add_header 'Access-Control-Allow-Methods' '$cors_methods';
                add_header 'Access-Control-Allow-Headers' '$cors_headers';
                add_header 'Access-Control-Allow-Credentials' 'true';
                add_header 'Access-Control-Max-Age' '86400';
                return 204;
            }

            proxy_pass http://application-service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;
            proxy_set_header Cookie $http_cookie;
            client_max_body_size 50M;
        }

        # Evaluations management
        location /api/evaluations {
            add_header 'Access-Control-Allow-Origin' '$cors_origin' always;
            add_header 'Access-Control-Allow-Methods' '$cors_methods' always;
            add_header 'Access-Control-Allow-Headers' '$cors_headers' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;

            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '$cors_origin';
                add_header 'Access-Control-Allow-Methods' '$cors_methods';
                add_header 'Access-Control-Allow-Headers' '$cors_headers';
                add_header 'Access-Control-Allow-Credentials' 'true';
                add_header 'Access-Control-Max-Age' '86400';
                return 204;
            }

            proxy_pass http://evaluation-service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;
            proxy_set_header Cookie $http_cookie;
        }

        # Interviews management
        location /api/interviews {
            add_header 'Access-Control-Allow-Origin' '$cors_origin' always;
            add_header 'Access-Control-Allow-Methods' '$cors_methods' always;
            add_header 'Access-Control-Allow-Headers' '$cors_headers' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;

            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '$cors_origin';
                add_header 'Access-Control-Allow-Methods' '$cors_methods';
                add_header 'Access-Control-Allow-Headers' '$cors_headers';
                add_header 'Access-Control-Allow-Credentials' 'true';
                add_header 'Access-Control-Max-Age' '86400';
                return 204;
            }

            proxy_pass http://evaluation-service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;
            proxy_set_header Cookie $http_cookie;
        }

        # Interviewer Schedules management
        location /api/interviewer-schedules {
            add_header 'Access-Control-Allow-Origin' '$cors_origin' always;
            add_header 'Access-Control-Allow-Methods' '$cors_methods' always;
            add_header 'Access-Control-Allow-Headers' '$cors_headers' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;

            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '$cors_origin';
                add_header 'Access-Control-Allow-Methods' '$cors_methods';
                add_header 'Access-Control-Allow-Headers' '$cors_headers';
                add_header 'Access-Control-Allow-Credentials' 'true';
                add_header 'Access-Control-Max-Age' '86400';
                return 204;
            }

            proxy_pass http://evaluation-service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;
            proxy_set_header Cookie $http_cookie;
        }

        # Email verification and management
        location /api/email {
            add_header 'Access-Control-Allow-Origin' '$cors_origin' always;
            add_header 'Access-Control-Allow-Methods' '$cors_methods' always;
            add_header 'Access-Control-Allow-Headers' '$cors_headers' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;

            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '$cors_origin';
                add_header 'Access-Control-Allow-Methods' '$cors_methods';
                add_header 'Access-Control-Allow-Headers' '$cors_headers';
                add_header 'Access-Control-Allow-Credentials' 'true';
                add_header 'Access-Control-Max-Age' '86400';
                return 204;
            }

            proxy_pass http://notification-service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;
            proxy_set_header Cookie $http_cookie;
        }

        # General notification management
        location /api/notifications {
            add_header 'Access-Control-Allow-Origin' '$cors_origin' always;
            add_header 'Access-Control-Allow-Methods' '$cors_methods' always;
            add_header 'Access-Control-Allow-Headers' '$cors_headers' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;

            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '$cors_origin';
                add_header 'Access-Control-Allow-Methods' '$cors_methods';
                add_header 'Access-Control-Allow-Headers' '$cors_headers';
                add_header 'Access-Control-Allow-Credentials' 'true';
                add_header 'Access-Control-Max-Age' '86400';
                return 204;
            }

            proxy_pass http://notification-service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;
            proxy_set_header Cookie $http_cookie;
        }

        # Institutional email management (document review, etc.)
        location /api/institutional-emails {
            add_header 'Access-Control-Allow-Origin' '$cors_origin' always;
            add_header 'Access-Control-Allow-Methods' '$cors_methods' always;
            add_header 'Access-Control-Allow-Headers' '$cors_headers' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;

            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '$cors_origin';
                add_header 'Access-Control-Allow-Methods' '$cors_methods';
                add_header 'Access-Control-Allow-Headers' '$cors_headers';
                add_header 'Access-Control-Allow-Credentials' 'true';
                add_header 'Access-Control-Max-Age' '86400';
                return 204;
            }

            proxy_pass http://notification-service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;
            proxy_set_header Cookie $http_cookie;
        }

        # Document uploads
        location /api/documents {
            add_header 'Access-Control-Allow-Origin' '$cors_origin' always;
            add_header 'Access-Control-Allow-Methods' '$cors_methods' always;
            add_header 'Access-Control-Allow-Headers' '$cors_headers' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;

            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '$cors_origin';
                add_header 'Access-Control-Allow-Methods' '$cors_methods';
                add_header 'Access-Control-Allow-Headers' '$cors_headers';
                add_header 'Access-Control-Allow-Credentials' 'true';
                add_header 'Access-Control-Max-Age' '86400';
                return 204;
            }

            proxy_pass http://application-service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;
            proxy_set_header Cookie $http_cookie;
            client_max_body_size 100M;
            client_body_timeout 30s;
        }

        # Dashboard routes
        location /api/dashboard {
            add_header 'Access-Control-Allow-Origin' '$cors_origin' always;
            add_header 'Access-Control-Allow-Methods' '$cors_methods' always;
            add_header 'Access-Control-Allow-Headers' '$cors_headers' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;

            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '$cors_origin';
                add_header 'Access-Control-Allow-Methods' '$cors_methods';
                add_header 'Access-Control-Allow-Headers' '$cors_headers';
                add_header 'Access-Control-Allow-Credentials' 'true';
                add_header 'Access-Control-Max-Age' '86400';
                return 204;
            }

            proxy_pass http://dashboard-service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;
            proxy_set_header Cookie $http_cookie;
        }

        # Analytics routes
        location /api/analytics {
            add_header 'Access-Control-Allow-Origin' '$cors_origin' always;
            add_header 'Access-Control-Allow-Methods' '$cors_methods' always;
            add_header 'Access-Control-Allow-Headers' '$cors_headers' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;

            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '$cors_origin';
                add_header 'Access-Control-Allow-Methods' '$cors_methods';
                add_header 'Access-Control-Allow-Headers' '$cors_headers';
                add_header 'Access-Control-Allow-Credentials' 'true';
                add_header 'Access-Control-Max-Age' '86400';
                return 204;
            }

            proxy_pass http://dashboard-service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;
            proxy_set_header Cookie $http_cookie;
        }

        # NEW: Guardian routes (CRITICAL FIX - was missing)
        location /api/guardians {
            add_header 'Access-Control-Allow-Origin' '$cors_origin' always;
            add_header 'Access-Control-Allow-Methods' '$cors_methods' always;
            add_header 'Access-Control-Allow-Headers' '$cors_headers' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;

            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '$cors_origin';
                add_header 'Access-Control-Allow-Methods' '$cors_methods';
                add_header 'Access-Control-Allow-Headers' '$cors_headers';
                add_header 'Access-Control-Allow-Credentials' 'true';
                add_header 'Access-Control-Max-Age' '86400';
                return 204;
            }

            proxy_pass http://guardian-service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;
            proxy_set_header Cookie $http_cookie;
        }

        # Gateway status endpoint
        location /gateway/status {
            access_log off;
            return 200 '{"gateway":"nginx","architecture":"100% microservices","services":["user-service","application-service","evaluation-service","notification-service","dashboard-service","guardian-service"]}';
            add_header Content-Type application/json;
        }

        # NEW: Gateway metrics endpoint
        location /gateway/metrics {
            stub_status;
            access_log off;
            allow 127.0.0.1;
            deny all;
        }

        # Default location for unmatched routes
        location / {
            return 404 '{"error":"Route not found in microservices architecture","gateway":"nginx"}';
            add_header Content-Type application/json;
        }

        # Custom error pages
        error_page 502 503 504 /50x.html;
        location = /50x.html {
            return 502 '{"error":"Service temporarily unavailable","gateway":"nginx","suggestion":"Check if microservices are running"}';
            add_header Content-Type application/json;
        }

        # Rate limit error handler
        error_page 429 /429.json;
        location = /429.json {
            return 429 '{"error":"Too many requests","retry_after":1}';
            add_header Content-Type application/json;
            add_header Retry-After "1";
        }
    }
}
