server:
  port: 8082
  servlet:
    context-path: /
  compression:
    enabled: true
  http2:
    enabled: true

spring:
  application:
    name: notification-service
    
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:local}
    
  # Datasource
  datasource:
    url: ${DATABASE_URL:jdbc:postgresql://localhost:5434/notification_service_db}
    username: ${DATABASE_USERNAME:notification_user}
    password: ${DATABASE_PASSWORD:notification_pass}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      idle-timeout: 300000
      connection-timeout: 20000
      leak-detection-threshold: 60000
      pool-name: NotificationServiceCP
      
  # JPA/Hibernate
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        use_sql_comments: false
        jdbc:
          time_zone: UTC
          batch_size: 25
        order_inserts: true
        order_updates: true
        generate_statistics: false
        
  # Flyway
  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true
    validate-on-migrate: true
    table: flyway_schema_history_notifications
    
  # RabbitMQ
  rabbitmq:
    host: ${RABBITMQ_HOST:localhost}
    port: ${RABBITMQ_PORT:5672}
    username: ${RABBITMQ_USERNAME:admin}
    password: ${RABBITMQ_PASSWORD:admin123}
    virtual-host: ${RABBITMQ_VIRTUAL_HOST:/}
    connection-timeout: 60000
    listener:
      simple:
        retry:
          enabled: true
          initial-interval: 1000
          max-attempts: 3
          max-interval: 10000
          multiplier: 2.0
        acknowledge-mode: auto
        prefetch: 10
        concurrency: 2
        max-concurrency: 5
        default-requeue-rejected: false
    publisher-confirm-type: correlated
    publisher-returns: true
    template:
      mandatory: true
      
  # Security - OAuth2 Resource Server
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${KEYCLOAK_ISSUER_URI:http://localhost:8080/realms/admision-mtn}
          jwk-set-uri: ${KEYCLOAK_JWK_SET_URI:http://localhost:8080/realms/admision-mtn/protocol/openid-connect/certs}
          
  # Mail Configuration
  mail:
    host: ${SMTP_HOST:smtp.gmail.com}
    port: ${SMTP_PORT:587}
    username: ${SMTP_USERNAME:}
    password: ${SMTP_PASSWORD:}
    protocol: smtp
    properties:
      mail:
        smtp:
          auth: ${SMTP_AUTH:true}
          starttls:
            enable: ${SMTP_STARTTLS:true}
            required: true
          ssl:
            trust: ${SMTP_HOST:smtp.gmail.com}
          connectiontimeout: 10000
          timeout: 10000
          writetimeout: 10000
          
  # Service Discovery
  cloud:
    discovery:
      enabled: true
      
# Eureka Client
eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_CLIENT_SERVICE_URL:http://localhost:8761/eureka/}
    register-with-eureka: true
    fetch-registry: true
    registry-fetch-interval-seconds: 30
  instance:
    prefer-ip-address: true
    lease-renewal-interval-in-seconds: 30
    lease-expiration-duration-in-seconds: 90
    hostname: ${HOSTNAME:localhost}
    instance-id: ${spring.application.name}:${server.port}
    metadata-map:
      management.context-path: ${management.endpoints.web.base-path:/actuator}
      health.path: ${management.endpoints.web.base-path:/actuator}/health
      
# Management/Actuator
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,env,beans,threaddump,heapdump
      base-path: /actuator
  endpoint:
    health:
      show-details: when-authorized
      show-components: always
      probes:
        enabled: true
    metrics:
      enabled: true
  health:
    readinessstate:
      enabled: true
    livenessstate:
      enabled: true
    rabbit:
      enabled: true
    mail:
      enabled: true
      
  # Observability
  observations:
    annotations:
      enabled: true
  tracing:
    sampling:
      probability: ${TRACING_SAMPLING_PROBABILITY:0.1}
  metrics:
    export:
      prometheus:
        enabled: true
    distribution:
      percentiles-histogram:
        http.server.requests: true
        notification.send.duration: true
      percentiles:
        http.server.requests: 0.5, 0.9, 0.95, 0.99
        notification.send.duration: 0.5, 0.9, 0.95, 0.99
        
# OpenTelemetry
otel:
  exporter:
    otlp:
      endpoint: ${OTEL_EXPORTER_OTLP_ENDPOINT:http://localhost:4317}
      protocol: ${OTEL_EXPORTER_OTLP_PROTOCOL:grpc}
  resource:
    attributes:
      service.name: ${spring.application.name}
      service.version: @project.version@
      deployment.environment: ${DEPLOYMENT_ENVIRONMENT:local}
      
# Application Configuration
notification:
  # Email Settings
  email:
    enabled: ${EMAIL_ENABLED:true}
    mock-mode: ${EMAIL_MOCK_MODE:true}
    from-name: ${EMAIL_FROM_NAME:Sistema de Admisi√≥n MTN}
    from-address: ${EMAIL_FROM_ADDRESS:noreply@mtn.cl}
    reply-to: ${EMAIL_REPLY_TO:soporte@mtn.cl}
    max-recipients: 50
    max-attachment-size: 10485760 # 10MB
    rate-limit:
      enabled: true
      max-per-minute: 60
      max-per-hour: 500
      
  # SMS Settings  
  sms:
    enabled: ${SMS_ENABLED:true}
    mock-mode: ${SMS_MOCK_MODE:true}
    provider: ${SMS_PROVIDER:twilio}
    rate-limit:
      enabled: true
      max-per-minute: 30
      max-per-hour: 200
    twilio:
      account-sid: ${TWILIO_ACCOUNT_SID:}
      auth-token: ${TWILIO_AUTH_TOKEN:}
      from-number: ${TWILIO_FROM_NUMBER:}
      
  # Template Settings
  templates:
    cache:
      enabled: true
      ttl-minutes: 30
      max-size: 100
    reload:
      enabled: ${TEMPLATE_RELOAD_ENABLED:true}
      interval-seconds: 300
      
  # Retry Configuration
  retry:
    max-attempts: 5
    initial-delay: 1000
    max-delay: 300000
    multiplier: 2.0
    
  # Dead Letter Queue
  dlq:
    enabled: true
    retention-days: 30
    alert-threshold: 10
    
# Logging
logging:
  level:
    root: INFO
    com.desafios.mtn.notificationservice: ${LOG_LEVEL:INFO}
    org.springframework.amqp: WARN
    org.springframework.mail: WARN
    org.hibernate.SQL: ${SQL_LOG_LEVEL:WARN}
    org.hibernate.type.descriptor.sql.BasicBinder: ${SQL_LOG_LEVEL:WARN}
    org.flywaydb: INFO
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] [%X{traceId:-},%X{spanId:-}] %-5level %logger{36} - %msg%n"
    
---
# Local Profile
spring:
  config:
    activate:
      on-profile: local
      
logging:
  level:
    com.desafios.mtn.notificationservice: DEBUG
    
notification:
  email:
    mock-mode: true
  sms:
    mock-mode: true
    
---
# Development Profile  
spring:
  config:
    activate:
      on-profile: dev
      
management:
  tracing:
    sampling:
      probability: 0.5
      
notification:
  email:
    mock-mode: false
    rate-limit:
      max-per-minute: 30
  sms:
    mock-mode: false
    rate-limit:
      max-per-minute: 10
      
---
# Production Profile
spring:
  config:
    activate:
      on-profile: prod
      
logging:
  level:
    root: WARN
    com.desafios.mtn.notificationservice: INFO
    
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  tracing:
    sampling:
      probability: 0.05
      
notification:
  email:
    mock-mode: false
    rate-limit:
      max-per-minute: 100
      max-per-hour: 1000
  sms:
    mock-mode: false
    rate-limit:
      max-per-minute: 50
      max-per-hour: 500
  templates:
    reload:
      enabled: false