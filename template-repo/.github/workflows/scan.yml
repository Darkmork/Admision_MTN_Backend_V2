name: Security & Compliance Scan
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Ejecutar escaneo nocturno todos los dÃ­as a las 02:00 Santiago
    - cron: '0 5 * * *'  # 05:00 UTC = 02:00 America/Santiago
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Tipo de escaneo'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - vulnerabilities
        - secrets
        - compliance
        - dependencies

env:
  TZ: America/Santiago

jobs:
  vulnerability-scan:
    name: Vulnerability Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'vulnerabilities' || github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == ''
    permissions:
      contents: read
      security-events: write
      
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Trivy Filesystem Scan
        uses: aquasecurity/trivy-action@0.20.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '0'  # No fallar pipeline en PR/push

      - name: Upload Trivy Scan Results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-fs-results.sarif'
          category: 'trivy-filesystem'

      - name: Run Trivy Config Scan
        uses: aquasecurity/trivy-action@0.20.0
        with:
          scan-type: 'config'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-config-results.sarif'
          exit-code: '0'

      - name: Upload Trivy Config Results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-config-results.sarif'
          category: 'trivy-config'

      - name: Generate Human-Readable Report
        if: always()
        uses: aquasecurity/trivy-action@0.20.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          output: 'vulnerability-report.txt'

      - name: Upload Vulnerability Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: vulnerability-report-${{ github.sha }}
          path: vulnerability-report.txt

  secret-scan:
    name: Secret Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'secrets' || github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == ''
    permissions:
      contents: read
      security-events: write
      
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog Secret Scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE}} # Solo si tienes licencia comercial

      - name: Upload GitLeaks Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report-${{ github.sha }}
          path: results.sarif

  dependency-scan:
    name: Dependency Scan  
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'dependencies' || github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == ''
    permissions:
      contents: read
      security-events: write
      
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      - name: OWASP Dependency Check
        run: |
          # Descargar OWASP Dependency Check
          wget -O dependency-check.zip https://github.com/jeremylong/DependencyCheck/releases/download/v8.4.0/dependency-check-8.4.0-release.zip
          unzip dependency-check.zip
          
          # Ejecutar escaneo
          ./dependency-check/bin/dependency-check.sh \
            --project "$(basename ${{ github.repository }})" \
            --scan . \
            --format ALL \
            --suppression .github/dependency-check-suppression.xml \
            --nvdApiKey ${{ secrets.NVD_API_KEY }} \
            --failOnCVSS 7

      - name: Upload OWASP Dependency Check Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report-${{ github.sha }}
          path: |
            dependency-check-report.html
            dependency-check-report.json
            dependency-check-report.xml

      - name: Maven Dependency Analysis
        if: hashFiles('pom.xml') != ''
        run: |
          ./mvnw dependency:analyze-report -B -ntp
          ./mvnw dependency:tree -B -ntp > dependency-tree.txt

      - name: Upload Maven Dependency Report
        if: hashFiles('pom.xml') != ''
        uses: actions/upload-artifact@v4
        with:
          name: maven-dependency-report-${{ github.sha }}
          path: |
            target/site/dependency-analysis.html
            dependency-tree.txt

  compliance-scan:
    name: Compliance Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'compliance' || github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == ''
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Docker CIS Benchmark
        if: hashFiles('Dockerfile') != ''
        run: |
          # Instalar docker-bench-security
          git clone https://github.com/docker/docker-bench-security.git
          cd docker-bench-security
          
          # Ejecutar benchmark
          sudo sh docker-bench-security.sh -c docker_enterprise_configuration
          
          # Copiar resultados
          cp docker-bench-security.sh.log ../docker-cis-benchmark.log

      - name: Kubernetes Security Scan
        if: hashFiles('k8s/**/*.yaml') != '' || hashFiles('helm/**/*.yaml') != ''
        run: |
          # Instalar kubesec
          wget -O kubesec https://github.com/controlplaneio/kubesec/releases/latest/download/kubesec_linux_amd64
          chmod +x kubesec
          
          # Escanear manifiestos de Kubernetes
          find . -name "*.yaml" -path "*/k8s/*" -o -path "*/helm/*" | while read file; do
            echo "Scanning $file" >> kubesec-results.txt
            ./kubesec scan "$file" >> kubesec-results.txt || true
            echo "---" >> kubesec-results.txt
          done

      - name: Polaris Configuration Validation
        if: hashFiles('k8s/**/*.yaml') != '' || hashFiles('helm/**/*.yaml') != ''
        run: |
          # Instalar Polaris
          wget -O polaris https://github.com/FairwindsOps/polaris/releases/latest/download/polaris_linux_amd64
          chmod +x polaris
          
          # Validar configuraciones
          ./polaris audit --audit-path . --format pretty > polaris-results.txt || true

      - name: Upload Compliance Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: compliance-report-${{ github.sha }}
          path: |
            docker-cis-benchmark.log
            kubesec-results.txt
            polaris-results.txt

  license-scan:
    name: License Compliance Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == ''
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Java
        if: hashFiles('pom.xml') != ''
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      - name: Maven License Check
        if: hashFiles('pom.xml') != ''
        run: |
          ./mvnw license:check -B -ntp || true
          ./mvnw license:aggregate-third-party-report -B -ntp || true

      - name: FOSSA Analysis
        if: env.FOSSA_API_KEY != ''
        uses: fossas/fossa-action@main
        with:
          api-key: ${{ secrets.FOSSA_API_KEY }}
          run-tests: true

      - name: Upload License Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: license-report-${{ github.sha }}
          path: |
            target/site/aggregate-third-party-report.html
            target/generated-sources/license/THIRD-PARTY.txt

  quality-metrics:
    name: Code Quality Metrics
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == ''
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java
        if: hashFiles('pom.xml') != ''
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      - name: Run PMD Analysis
        if: hashFiles('pom.xml') != ''
        run: |
          ./mvnw pmd:pmd -B -ntp || true
          ./mvnw pmd:cpd -B -ntp || true

      - name: Run SpotBugs Analysis
        if: hashFiles('pom.xml') != ''
        run: |
          ./mvnw spotbugs:spotbugs -B -ntp || true

      - name: Upload Quality Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: quality-report-${{ github.sha }}
          path: |
            target/site/pmd.html
            target/site/cpd.html
            target/site/spotbugs.html

  consolidate-results:
    name: Consolidate Security Results
    runs-on: ubuntu-latest
    needs: [vulnerability-scan, secret-scan, dependency-scan, compliance-scan, license-scan, quality-metrics]
    if: always()
    permissions:
      contents: read
      security-events: write
      issues: write
      
    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v4

      - name: Generate Security Dashboard
        run: |
          cat > security-dashboard.md << 'EOF'
          # Security & Compliance Dashboard
          
          **Repository:** ${{ github.repository }}
          **Commit:** ${{ github.sha }}
          **Scan Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Timezone:** America/Santiago
          
          ## Scan Results Summary
          
          | Scan Type | Status | Details |
          |-----------|--------|---------|
          | Vulnerability Scan | ${{ needs.vulnerability-scan.result || 'skipped' }} | Trivy filesystem and configuration |
          | Secret Scan | ${{ needs.secret-scan.result || 'skipped' }} | TruffleHog and GitLeaks |
          | Dependency Scan | ${{ needs.dependency-scan.result || 'skipped' }} | OWASP Dependency Check |
          | Compliance Scan | ${{ needs.compliance-scan.result || 'skipped' }} | Docker CIS, Kubernetes Security |
          | License Scan | ${{ needs.license-scan.result || 'skipped' }} | License compliance check |
          | Quality Metrics | ${{ needs.quality-metrics.result || 'skipped' }} | PMD, SpotBugs analysis |
          
          ## Recommendations
          
          - Review all HIGH and CRITICAL vulnerabilities
          - Verify no secrets were detected
          - Update dependencies with known vulnerabilities
          - Address compliance violations
          - Review license compatibility
          
          ## Next Steps
          
          1. Download detailed reports from workflow artifacts
          2. Create issues for critical findings
          3. Update security baseline if needed
          4. Schedule regular security reviews
          
          ---
          *Generated by GitHub Actions Security Scan Pipeline*
          EOF

      - name: Upload Security Dashboard
        uses: actions/upload-artifact@v4
        with:
          name: security-dashboard-${{ github.sha }}
          path: security-dashboard.md

      - name: Create Issue for Critical Findings
        if: needs.vulnerability-scan.result == 'failure' || needs.secret-scan.result == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            const title = `ð Security Scan Alert - ${new Date().toISOString().split('T')[0]}`;
            const body = `
            ## Security Scan Results
            
            **Repository:** ${{ github.repository }}
            **Commit:** ${{ github.sha }}
            **Workflow:** [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            ### Critical Findings Detected
            
            ${needs.vulnerability-scan.result === 'failure' ? 'â **Vulnerability Scan Failed** - Critical or high vulnerabilities found' : ''}
            ${needs.secret-scan.result === 'failure' ? 'â **Secret Scan Failed** - Potential secrets detected' : ''}
            
            ### Action Required
            
            1. Review detailed scan reports in workflow artifacts
            2. Address critical and high-severity findings
            3. Verify no secrets are committed to repository
            4. Close this issue once all findings are resolved
            
            ### Reports Available
            
            - Vulnerability Report: Download from workflow artifacts
            - Secret Scan Results: Check workflow logs
            - Full Security Dashboard: Available in artifacts
            
            ---
            *This issue was automatically created by the Security Scan workflow*
            `;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['security', 'urgent']
            });

  notify:
    name: Notify Security Team
    runs-on: ubuntu-latest
    needs: [consolidate-results]
    if: always() && (needs.vulnerability-scan.result == 'failure' || needs.secret-scan.result == 'failure')
    
    steps:
      - name: Slack Security Alert
        if: env.SLACK_WEBHOOK_URL != ''
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#security-alerts'
          username: 'Security Scanner'
          icon_emoji: ':warning:'
          text: |
            ð¨ *Security Scan Alert*
            
            *Repository:* ${{ github.repository }}
            *Branch:* ${{ github.ref_name }}
            *Commit:* `${{ github.sha }}`
            
            â ï¸ Critical security findings detected!
            
            Please review the scan results immediately:
            <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Scan Results>
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}