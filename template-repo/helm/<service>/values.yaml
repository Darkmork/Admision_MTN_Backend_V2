# Default values for <service>
# This is a YAML-formatted file.

# Global configuration
global:
  imageRegistry: ""
  imagePullSecrets: []

# Image configuration
image:
  registry: ghcr.io
  repository: mtn-org/<service>
  tag: "dev"
  pullPolicy: IfNotPresent
  pullSecrets: []

# Build and deployment metadata
build:
  sha: "dev"
  url: "https://github.com/mtn-org/<service>/actions/runs/123"
  deploymentId: "manual"
  timestamp: ""
  triggeredBy: "manual"

# Service configuration
service:
  type: ClusterIP
  port: 8080
  targetPort: 8080
  annotations: {}
  labels: {}

# Rollout strategy (Argo Rollouts)
rollout:
  enabled: true
  strategy: canary
  canary:
    # Canary steps: 10% -> 50% -> 100%
    steps:
      - setWeight: 10
      - pause: { duration: 2m }
      - analysis:
          templates:
            - templateName: success-rate
            - templateName: latency-p99
          args:
            - name: service-name
              value: "{{ include \"<service>.fullname\" . }}"
      - setWeight: 50
      - pause: { duration: 5m }
      - analysis:
          templates:
            - templateName: success-rate
            - templateName: latency-p99
          args:
            - name: service-name
              value: "{{ include \"<service>.fullname\" . }}"
      - setWeight: 100
    trafficRouting:
      nginx:
        stableIngress: "{{ include \"<service>.fullname\" . }}"
        additionalIngressAnnotations:
          canary-by-header: "X-Canary"
    analysis:
      successCondition: result[0] >= 0.95
      failureLimit: 3
      inconclusiveLimit: 5
      interval: 10s
      count: 6
    maxSurge: "25%"
    maxUnavailable: 1
  revisionHistoryLimit: 3
  progressDeadlineSeconds: 600
  autoRollbackOnFailure: true

# Pod configuration
replicaCount: 2
revisionHistoryLimit: 3

# Container resources
resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 100m
    memory: 256Mi

# Horizontal Pod Autoscaler
autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1
  # maxUnavailable: 1

# Security Context
podSecurityContext:
  fsGroup: 1001
  runAsNonRoot: true
  runAsUser: 1001
  runAsGroup: 1001
  seccompProfile:
    type: RuntimeDefault

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: false
  runAsNonRoot: true
  runAsUser: 1001

# Health checks
healthChecks:
  enabled: true
  livenessProbe:
    httpGet:
      path: /actuator/health/liveness
      port: 8080
    initialDelaySeconds: 20
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
  readinessProbe:
    httpGet:
      path: /actuator/health/readiness
      port: 8080
    initialDelaySeconds: 10
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3
    successThreshold: 1
  startupProbe:
    httpGet:
      path: /actuator/health
      port: 8080
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 30
    successThreshold: 1

# Environment variables
env:
  # Spring Boot configuration
  - name: SPRING_PROFILES_ACTIVE
    value: "kubernetes"
  - name: MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE
    value: "health,info,metrics,prometheus"
  - name: MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS
    value: "always"
  - name: JAVA_OPTS
    value: "-Xmx400m -XX:+UseG1GC -XX:+UseContainerSupport"
  
  # Timezone
  - name: TZ
    value: "America/Santiago"
  
  # Application metadata
  - name: BUILD_SHA
    value: "{{ .Values.build.sha }}"
  - name: BUILD_URL
    value: "{{ .Values.build.url }}"
  - name: DEPLOYMENT_ID
    value: "{{ .Values.build.deploymentId }}"

# ConfigMap configuration
configMap:
  enabled: true
  data: {}

# Secret configuration
secret:
  enabled: true
  data: {}

# Service Account
serviceAccount:
  create: true
  automount: true
  annotations: {}
  name: ""
  labels: {}

# RBAC configuration
rbac:
  create: false
  rules: []

# Network Policy
networkPolicy:
  enabled: false
  ingress: []
  egress: []

# Ingress configuration
ingress:
  enabled: false
  className: "nginx"
  annotations: {}
    # nginx.ingress.kubernetes.io/rewrite-target: /
    # cert-manager.io/cluster-issuer: letsencrypt-prod
  hosts:
    - host: <service>-dev.mtn.cl
      paths:
        - path: /
          pathType: Prefix
  tls: []
    # - secretName: <service>-tls
    #   hosts:
    #     - <service>-dev.mtn.cl

# Monitoring configuration
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    namespace: ""
    interval: 30s
    scrapeTimeout: 10s
    labels: {}
    annotations: {}
    path: /actuator/prometheus
    honorLabels: true
  prometheusRule:
    enabled: true
    namespace: ""
    labels: {}
    annotations: {}
    rules:
      - alert: <Service>HighErrorRate
        expr: |
          (
            sum(rate(http_server_requests_total{job="<service>",status=~"5.."}[2m])) /
            sum(rate(http_server_requests_total{job="<service>"}[2m]))
          ) > 0.05
        for: 2m
        labels:
          severity: warning
          service: <service>
        annotations:
          summary: "High error rate detected"
          description: "Error rate is {{ $value | humanizePercentage }}"
      
      - alert: <Service>HighLatency
        expr: |
          histogram_quantile(0.99,
            sum by (le) (rate(http_server_requests_seconds_bucket{job="<service>"}[2m]))
          ) > 2
        for: 5m
        labels:
          severity: warning
          service: <service>
        annotations:
          summary: "High latency detected"
          description: "99th percentile latency is {{ $value }}s"

# Persistence (if needed)
persistence:
  enabled: false
  storageClass: ""
  accessModes:
    - ReadWriteOnce
  size: 8Gi
  annotations: {}
  mountPath: /data
  subPath: ""

# Node selection
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity and anti-affinity
affinity: {}

# Pod anti-affinity preset
podAntiAffinity: soft  # soft, hard, or ""

# Topology spread constraints
topologySpreadConstraints: []

# Priority class
priorityClassName: ""

# Termination grace period
terminationGracePeriodSeconds: 30

# Init containers
initContainers: []

# Sidecar containers
sidecars: []

# Extra volumes
extraVolumes: []

# Extra volume mounts
extraVolumeMounts: []

# Pod annotations
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/path: "/actuator/prometheus"
  prometheus.io/port: "8080"

# Pod labels
podLabels: {}

# Additional labels for all resources
commonLabels: {}

# Additional annotations for all resources
commonAnnotations: {}

# Test configuration
tests:
  enabled: true
  image:
    registry: docker.io
    repository: curlimages/curl
    tag: latest
  resources:
    limits:
      cpu: 100m
      memory: 128Mi
    requests:
      cpu: 50m
      memory: 64Mi