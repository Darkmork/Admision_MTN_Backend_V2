# docker-compose.microservices-only.yml
# ARQUITECTURA 100% MICROSERVICIOS - SIN MONOLITO
version: '3.8'

services:
  # ==========================================
  # DATABASES (UNA POR MICROSERVICIO)
  # ==========================================
  
  # User Service Database
  users-db:
    image: postgres:15-alpine
    container_name: mtn-users-db
    environment:
      POSTGRES_DB: users_db
      POSTGRES_USER: users_admin
      POSTGRES_PASSWORD: users123
    ports:
      - "5433:5432"
    volumes:
      - users_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U users_admin -d users_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mtn-network
    restart: unless-stopped

  # Application Service Database
  applications-db:
    image: postgres:15-alpine
    container_name: mtn-applications-db
    environment:
      POSTGRES_DB: applications_db
      POSTGRES_USER: app_admin
      POSTGRES_PASSWORD: app123
    ports:
      - "5434:5432"
    volumes:
      - applications_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app_admin -d applications_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mtn-network
    restart: unless-stopped

  # Evaluation Service Database
  evaluations-db:
    image: postgres:15-alpine
    container_name: mtn-evaluations-db
    environment:
      POSTGRES_DB: evaluations_db
      POSTGRES_USER: eval_admin
      POSTGRES_PASSWORD: eval123
    ports:
      - "5435:5432"
    volumes:
      - evaluations_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U eval_admin -d evaluations_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mtn-network
    restart: unless-stopped

  # Notification Service Database
  notifications-db:
    image: postgres:15-alpine
    container_name: mtn-notifications-db
    environment:
      POSTGRES_DB: notifications_db
      POSTGRES_USER: notif_admin
      POSTGRES_PASSWORD: notif123
    ports:
      - "5436:5432"
    volumes:
      - notifications_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U notif_admin -d notifications_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mtn-network
    restart: unless-stopped

  # ==========================================
  # API GATEWAY (NGINX - PUNTO DE ENTRADA ÚNICO)
  # ==========================================
  
  api-gateway:
    image: nginx:alpine
    container_name: mtn-api-gateway
    ports:
      - "8080:80"  # PUERTO PRINCIPAL DEL SISTEMA
    volumes:
      - ./gateway-microservices.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - user-service
      - application-service
      - evaluation-service
      - notification-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - mtn-network
    restart: unless-stopped

  # ==========================================
  # MICROSERVICIOS (TODA LA FUNCIONALIDAD DISTRIBUIDA)
  # ==========================================

  # User Service - Gestión de usuarios y autenticación
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: mtn-user-service
    environment:
      SPRING_PROFILES_ACTIVE: microservices
      SERVER_PORT: 8082
      DB_URL: jdbc:postgresql://users-db:5432/users_db
      DB_USERNAME: users_admin
      DB_PASSWORD: users123
      RABBITMQ_HOST: rabbitmq
    ports:
      - "8082:8082"
    depends_on:
      users-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - mtn-network
    restart: unless-stopped

  # Application Service - Gestión de postulaciones
  application-service:
    build:
      context: ./application-service
      dockerfile: Dockerfile
    container_name: mtn-application-service
    environment:
      SPRING_PROFILES_ACTIVE: microservices
      SERVER_PORT: 8083
      DB_URL: jdbc:postgresql://applications-db:5432/applications_db
      DB_USERNAME: app_admin
      DB_PASSWORD: app123
      USER_SERVICE_URL: http://user-service:8082
      RABBITMQ_HOST: rabbitmq
    ports:
      - "8083:8083"
    depends_on:
      applications-db:
        condition: service_healthy
      user-service:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - mtn-network
    restart: unless-stopped

  # Evaluation Service - Evaluaciones y entrevistas
  evaluation-service:
    build:
      context: ./evaluation-service
      dockerfile: Dockerfile
    container_name: mtn-evaluation-service
    environment:
      SPRING_PROFILES_ACTIVE: microservices
      SERVER_PORT: 8084
      DB_URL: jdbc:postgresql://evaluations-db:5432/evaluations_db
      DB_USERNAME: eval_admin
      DB_PASSWORD: eval123
      USER_SERVICE_URL: http://user-service:8082
      APPLICATION_SERVICE_URL: http://application-service:8083
      RABBITMQ_HOST: rabbitmq
    ports:
      - "8084:8084"
    depends_on:
      evaluations-db:
        condition: service_healthy
      user-service:
        condition: service_healthy
      application-service:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - mtn-network
    restart: unless-stopped

  # Notification Service - Emails y notificaciones
  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    container_name: mtn-notification-service
    environment:
      SPRING_PROFILES_ACTIVE: microservices
      SERVER_PORT: 8085
      DB_URL: jdbc:postgresql://notifications-db:5432/notifications_db
      DB_USERNAME: notif_admin
      DB_PASSWORD: notif123
      SMTP_HOST: ${SMTP_HOST:-smtp.gmail.com}
      SMTP_USERNAME: ${SMTP_USERNAME:-jorge.gangale@mtn.cl}
      SMTP_PASSWORD: ${SMTP_PASSWORD:-app_password}
      RABBITMQ_HOST: rabbitmq
    ports:
      - "8085:8085"
    depends_on:
      notifications-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - mtn-network
    restart: unless-stopped

  # ==========================================
  # MESSAGE BROKER (COMUNICACIÓN ENTRE SERVICIOS)
  # ==========================================
  
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: mtn-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - mtn-network
    restart: unless-stopped

  # ==========================================
  # OBSERVABILIDAD (MONITOREO DISTRIBUIDO)
  # ==========================================
  
  # Prometheus - Métricas
  prometheus:
    image: prom/prometheus:latest
    container_name: mtn-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus-microservices.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    networks:
      - mtn-network
    restart: unless-stopped

  # Grafana - Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: mtn-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - mtn-network
    restart: unless-stopped

# ==========================================
# NETWORKS
# ==========================================

networks:
  mtn-network:
    driver: bridge
    name: mtn-microservices-network

# ==========================================
# VOLUMES
# ==========================================

volumes:
  users_db_data:
    name: mtn_users_db_data
  applications_db_data:
    name: mtn_applications_db_data
  evaluations_db_data:
    name: mtn_evaluations_db_data
  notifications_db_data:
    name: mtn_notifications_db_data
  rabbitmq_data:
    name: mtn_rabbitmq_data
  prometheus_data:
    name: mtn_prometheus_data
  grafana_data:
    name: mtn_grafana_data