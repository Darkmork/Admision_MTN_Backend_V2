# Local NGINX Configuration for Microservices - CORS Fixed
events {
    worker_connections 1024;
}

http {
    include       /opt/homebrew/etc/nginx/mime.types;
    default_type  application/octet-stream;

    # CORS configuration
    map $request_method $cors_method {
        OPTIONS 11;
        GET     1;
        POST    1;
        PUT     1;
        DELETE  1;
        default 0;
    }

    # Upstream servers (microservices)
    upstream user-service {
        server localhost:8082;
    }

    upstream application-service {
        server localhost:8083;
    }

    upstream evaluation-service {
        server localhost:8084;
    }

    upstream notification-service {
        server localhost:8085;
    }

    upstream dashboard-service {
        server localhost:8086;
    }

    server {
        listen 8080;
        server_name localhost;

        # Global CORS handling
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept, Authorization, Cache-Control, x-correlation-id' always;
        add_header 'Access-Control-Max-Age' 1728000 always;

        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            return 204;
        }

        # Health check endpoint for the gateway itself
        location /health {
            return 200 '{"status":"UP","service":"api-gateway","architecture":"microservices"}';
            add_header Content-Type application/json;
        }

        # Authentication routes (login, register, etc.)
        location /api/auth {
            proxy_pass http://user-service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # User management routes
        location /api/users {
            proxy_pass http://user-service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Applications management
        location /api/applications {
            proxy_pass http://application-service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            client_max_body_size 50M;
        }

        # Evaluations management
        location /api/evaluations {
            proxy_pass http://evaluation-service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Interviews management
        location /api/interviews {
            proxy_pass http://evaluation-service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Email verification and management (routed to notification service)
        location /api/email {
            proxy_pass http://notification-service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # General notification management
        location /api/notifications {
            proxy_pass http://notification-service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Document uploads (routed to application service)
        location /api/documents {
            proxy_pass http://application-service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            client_max_body_size 100M;
        }

        # Dashboard routes (routed to dedicated dashboard service)
        location /api/dashboard {
            proxy_pass http://dashboard-service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Gateway status endpoint
        location /gateway/status {
            return 200 '{"gateway":"nginx","architecture":"100% microservices","services":["user-service","application-service","evaluation-service","notification-service","dashboard-service"]}';
            add_header Content-Type application/json;
        }

        # Default location for unmatched routes
        location / {
            return 404 '{"error":"Route not found in microservices architecture","gateway":"nginx"}';
            add_header Content-Type application/json;
        }

        # Custom error pages
        error_page 502 503 504 /50x.html;
        location = /50x.html {
            return 502 '{"error":"Service temporarily unavailable","gateway":"nginx","suggestion":"Check if microservices are running"}';
            add_header Content-Type application/json;
        }
    }
}